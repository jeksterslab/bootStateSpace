[{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/bootStateSpace.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"bootStateSpace: Bootstrap for State Space Models","text":"Provides streamlined user-friendly framework bootstrapping state space models, particularly number subjects/units (n) exceeds one, scenario commonly encountered social behavioral sciences. parametric bootstrap implemented developed applied Pesigan, Russell, Chow (2025: https://doi.org/10.1037/met0000779).","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/bootStateSpace.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"bootStateSpace: Bootstrap for State Space Models","text":"can install CRAN release bootStateSpace : can install development version bootStateSpace GitHub :","code":"install.packages(\"bootStateSpace\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/bootStateSpace\")"},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/bootStateSpace.html","id":"more-information","dir":"Articles","previous_headings":"","what":"More Information","title":"bootStateSpace: Bootstrap for State Space Models","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/bootStateSpace.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"bootStateSpace: Bootstrap for State Space Models","text":"cite bootStateSpace publications, please cite Pesigan et al. (2025).","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-ou.html","id":"model","dir":"Articles","previous_headings":"","what":"Model","title":"Parametric Bootstrap (The Ornstein–Uhlenbeck Model)","text":"measurement model given 𝐲i,t=𝛎+𝚲𝛈i,t+𝛆i,t,with𝛆i,t∼𝒩(𝟎,𝚯)\\begin{equation}   \\mathbf{y}_{, t}   =   \\boldsymbol{\\nu}   +   \\boldsymbol{\\Lambda}   \\boldsymbol{\\eta}_{, t}   +   \\boldsymbol{\\varepsilon}_{, t},   \\quad   \\mathrm{}   \\quad   \\boldsymbol{\\varepsilon}_{, t}   \\sim   \\mathcal{N}   \\left(   \\mathbf{0},   \\boldsymbol{\\Theta}   \\right) \\end{equation} 𝐲i,t\\mathbf{y}_{, t}, 𝛈i,t\\boldsymbol{\\eta}_{, t}, 𝛆i,t\\boldsymbol{\\varepsilon}_{, t} random variables 𝛎\\boldsymbol{\\nu}, 𝚲\\boldsymbol{\\Lambda}, 𝚯\\boldsymbol{\\Theta} model parameters. 𝐲i,t\\mathbf{y}_{, t} represents vector observed random variables, 𝛈i,t\\boldsymbol{\\eta}_{, t} vector latent random variables, 𝛆i,t\\boldsymbol{\\varepsilon}_{, t} vector random measurement errors, time tt individual ii. 𝛎\\boldsymbol{\\nu} denotes vector intercepts, 𝚲\\boldsymbol{\\Lambda} matrix factor loadings, 𝚯\\boldsymbol{\\Theta} covariance matrix 𝛆\\boldsymbol{\\varepsilon}. alternative representation measurement error given 𝛆i,t=𝚯12𝐳i,t,with𝐳i,t∼𝒩(𝟎,𝐈)\\begin{equation}   \\boldsymbol{\\varepsilon}_{, t}   =   \\boldsymbol{\\Theta}^{\\frac{1}{2}}   \\mathbf{z}_{, t},   \\quad   \\mathrm{}   \\quad   \\mathbf{z}_{, t}   \\sim   \\mathcal{N}   \\left(   \\mathbf{0},   \\mathbf{}   \\right) \\end{equation} 𝐳i,t\\mathbf{z}_{, t} vector independent standard normal random variables (𝚯12)(𝚯12)′=𝚯\\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right) \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime} = \\boldsymbol{\\Theta} . dynamic structure given d𝛈i,t=𝚽(𝛈i,t−𝛍)dt+𝚺12d𝐖i,t\\begin{equation}   \\mathrm{d} \\boldsymbol{\\eta}_{, t}   =   \\boldsymbol{\\Phi}   \\left(   \\boldsymbol{\\eta}_{, t}   -   \\boldsymbol{\\mu}   \\right)   \\mathrm{d}t   +   \\boldsymbol{\\Sigma}^{\\frac{1}{2}}   \\mathrm{d}   \\mathbf{W}_{, t} \\end{equation} 𝛍\\boldsymbol{\\mu} long-term mean equilibrium level, 𝚽\\boldsymbol{\\Phi} rate mean reversion, determining quickly variable returns mean, 𝚺\\boldsymbol{\\Sigma} matrix volatility randomness process, d𝐖\\mathrm{d}\\boldsymbol{W} Wiener process Brownian motion, represents random fluctuations.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-ou.html","id":"notation","dir":"Articles","previous_headings":"Parameters","what":"Notation","title":"Parametric Bootstrap (The Ornstein–Uhlenbeck Model)","text":"Let t=100t = 100 number time points n=5n = 5 number individuals. Let measurement model intecept vector 𝛎\\boldsymbol{\\nu} given 𝛎=(000).\\begin{equation} \\boldsymbol{\\nu} = \\left( \\begin{array}{c}   0 \\\\   0 \\\\   0 \\\\ \\end{array} \\right) . \\end{equation} Let factor loadings matrix 𝚲\\boldsymbol{\\Lambda} given 𝚲=(100010001).\\begin{equation} \\boldsymbol{\\Lambda} = \\left( \\begin{array}{ccc}   1 & 0 & 0 \\\\   0 & 1 & 0 \\\\   0 & 0 & 1 \\\\ \\end{array} \\right) . \\end{equation} Let measurement error covariance matrix 𝚯\\boldsymbol{\\Theta} given 𝚯=(0.20000.20000.2).\\begin{equation} \\boldsymbol{\\Theta} = \\left( \\begin{array}{ccc}   0.2 & 0 & 0 \\\\   0 & 0.2 & 0 \\\\   0 & 0 & 0.2 \\\\ \\end{array} \\right) . \\end{equation} Let initial condition 𝛈0\\boldsymbol{\\eta}_{0} given 𝛈0∼𝒩(𝛍𝛈∣0,𝚺𝛈∣0)\\begin{equation} \\boldsymbol{\\eta}_{0} \\sim \\mathcal{N} \\left( \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}, \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} \\right) \\end{equation} 𝛍𝛈∣0=(000)\\begin{equation} \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0} = \\left( \\begin{array}{c}   0 \\\\   0 \\\\   0 \\\\ \\end{array} \\right) \\end{equation} 𝚺𝛈∣0=(10.20.20.210.20.20.21).\\begin{equation} \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} = \\left( \\begin{array}{ccc}   1 & 0.2 & 0.2 \\\\   0.2 & 1 & 0.2 \\\\   0.2 & 0.2 & 1 \\\\ \\end{array} \\right) . \\end{equation} Let long-term mean vector 𝛍\\boldsymbol{\\mu} given 𝛍=(000).\\begin{equation} \\boldsymbol{\\mu} = \\left( \\begin{array}{c}   0 \\\\   0 \\\\   0 \\\\ \\end{array} \\right) . \\end{equation} Let rate mean reversion matrix 𝚽\\boldsymbol{\\Phi} given 𝚽=(−0.357000.771−0.5110−0.450.729−0.693).\\begin{equation} \\boldsymbol{\\Phi} = \\left( \\begin{array}{ccc}   -0.357 & 0 & 0 \\\\   0.771 & -0.511 & 0 \\\\   -0.45 & 0.729 & -0.693 \\\\ \\end{array} \\right) . \\end{equation} Let dynamic process noise covariance matrix 𝚺\\boldsymbol{\\Sigma} given 𝚺=(0.24455560.0220159−0.05004760.02201590.0706780.0153946−0.05004760.01539460.0755306).\\begin{equation} \\boldsymbol{\\Sigma} = \\left( \\begin{array}{ccc}   0.2445556 & 0.0220159 & -0.0500476 \\\\   0.0220159 & 0.070678 & 0.0153946 \\\\   -0.0500476 & 0.0153946 & 0.0755306 \\\\ \\end{array} \\right) . \\end{equation} Let Δt=0.1\\Delta t = 0.1.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-ou.html","id":"r-function-arguments","dir":"Articles","previous_headings":"Parameters","what":"R Function Arguments","title":"Parametric Bootstrap (The Ornstein–Uhlenbeck Model)","text":"","code":"n #> [1] 5 time #> [1] 100 delta_t #> [1] 0.1 mu0 #> [1] 0 0 0 sigma0 #>      [,1] [,2] [,3] #> [1,]  1.0  0.2  0.2 #> [2,]  0.2  1.0  0.2 #> [3,]  0.2  0.2  1.0 sigma0_l # sigma0_l <- t(chol(sigma0)) #>      [,1]      [,2]      [,3] #> [1,]  1.0 0.0000000 0.0000000 #> [2,]  0.2 0.9797959 0.0000000 #> [3,]  0.2 0.1632993 0.9660918 mu #> [1] 0 0 0 phi #>        [,1]   [,2]   [,3] #> [1,] -0.357  0.000  0.000 #> [2,]  0.771 -0.511  0.000 #> [3,] -0.450  0.729 -0.693 sigma #>             [,1]       [,2]        [,3] #> [1,]  0.24455556 0.02201587 -0.05004762 #> [2,]  0.02201587 0.07067800  0.01539456 #> [3,] -0.05004762 0.01539456  0.07553061 sigma_l # sigma_l <- t(chol(sigma)) #>             [,1]      [,2]     [,3] #> [1,]  0.49452559 0.0000000 0.000000 #> [2,]  0.04451917 0.2620993 0.000000 #> [3,] -0.10120330 0.0759256 0.243975 nu #> [1] 0 0 0 lambda #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 theta #>      [,1] [,2] [,3] #> [1,]  0.2  0.0  0.0 #> [2,]  0.0  0.2  0.0 #> [3,]  0.0  0.0  0.2 theta_l # theta_l <- t(chol(theta)) #>           [,1]      [,2]      [,3] #> [1,] 0.4472136 0.0000000 0.0000000 #> [2,] 0.0000000 0.4472136 0.0000000 #> [3,] 0.0000000 0.0000000 0.4472136"},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-ou.html","id":"parametric-bootstrap","dir":"Articles","previous_headings":"Parameters","what":"Parametric Bootstrap","title":"Parametric Bootstrap (The Ornstein–Uhlenbeck Model)","text":"use PBSSMOUFixed function bootStateSpace package perform parametric bootstraping using parameters described . argument R specifies number bootstrap replications. generated data model estimates stored path using specified prefix file names. ncores = parallel::detectCores() argument instructs function use available CPU cores system. NOTE: Fitting Ornstein–Uhlenbeck model multiple times computationally intensive.","code":"R <- 5L # use at least 1000 in actual research path <- getwd() prefix <- \"ou\" library(bootStateSpace) pb <- PBSSMOUFixed(   R = R,   path = path,   prefix = prefix,   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = parallel::detectCores(),   seed = 42 ) summary(pb) #> Call: #> PBSSMOUFixed(R = R, path = path, prefix = prefix, n = n, time = time,  #>     delta_t = delta_t, mu0 = mu0, sigma0_l = sigma0_l, mu = mu,  #>     phi = phi, sigma_l = sigma_l, nu = nu, lambda = lambda, theta_l = theta_l,  #>     ncores = parallel::detectCores(), seed = 42) #>  #> Parametric bootstrap confidence intervals. #> type = \"pc\" #>                est     se R    2.5%   97.5% #> phi_1_1    -0.3570 0.4992 5 -1.1486  0.0914 #> phi_2_1     0.7710 0.1727 5  0.7214  1.1456 #> phi_3_1    -0.4500 0.2344 5 -0.9765 -0.4104 #> phi_1_2     0.0000 0.4376 5 -0.2748  0.7833 #> phi_2_2    -0.5110 0.1230 5 -0.7622 -0.4552 #> phi_3_2     0.7290 0.2258 5  0.6946  1.2565 #> phi_1_3     0.0000 0.2674 5 -0.5034  0.1393 #> phi_2_3     0.0000 0.1400 5 -0.1087  0.1993 #> phi_3_3    -0.6930 0.1726 5 -1.0646 -0.6389 #> sigma_1_1   0.2446 0.1077 5  0.1493  0.4117 #> sigma_2_1   0.0220 0.0236 5 -0.0224  0.0256 #> sigma_3_1  -0.0500 0.0211 5 -0.0330  0.0122 #> sigma_2_2   0.0707 0.0195 5  0.0185  0.0631 #> sigma_3_2   0.0154 0.0159 5 -0.0156  0.0209 #> sigma_3_3   0.0755 0.0206 5  0.0412  0.0874 #> theta_1_1   0.2000 0.0142 5  0.1830  0.2143 #> theta_2_2   0.2000 0.0087 5  0.1785  0.2002 #> theta_3_3   0.2000 0.0144 5  0.1919  0.2250 #> mu0_1_1     0.0000 0.6809 5 -0.7887  0.8147 #> mu0_2_1     0.0000 0.4397 5 -0.2091  0.7084 #> mu0_3_1     0.0000 0.2297 5 -0.4542  0.0710 #> sigma0_1_1  1.0000 1.0956 5  0.2224  2.6153 #> sigma0_2_1  0.2000 0.4511 5 -0.2655  0.7660 #> sigma0_3_1  0.2000 0.3841 5 -0.1146  0.8231 #> sigma0_2_2  1.0000 0.3348 5  0.3519  1.1365 #> sigma0_3_2  0.2000 0.2903 5 -0.3875  0.2771 #> sigma0_3_3  1.0000 0.8905 5  0.2095  2.2926 summary(pb, type = \"bc\") #> Call: #> PBSSMOUFixed(R = R, path = path, prefix = prefix, n = n, time = time,  #>     delta_t = delta_t, mu0 = mu0, sigma0_l = sigma0_l, mu = mu,  #>     phi = phi, sigma_l = sigma_l, nu = nu, lambda = lambda, theta_l = theta_l,  #>     ncores = parallel::detectCores(), seed = 42) #>  #> Parametric bootstrap confidence intervals. #> type = \"bc\" #>                est     se R    2.5%   97.5% #> phi_1_1    -0.3570 0.4992 5 -1.2082  0.0127 #> phi_2_1     0.7710 0.1727 5  0.7107  0.8731 #> phi_3_1    -0.4500 0.2344 5 -0.6747 -0.4016 #> phi_1_2     0.0000 0.4376 5 -0.2925  0.6334 #> phi_2_2    -0.5110 0.1230 5 -0.5749 -0.4453 #> phi_3_2     0.7290 0.2258 5  0.6780  0.9895 #> phi_1_3     0.0000 0.2674 5 -0.0471  0.1550 #> phi_2_3     0.0000 0.1400 5 -0.0935  0.2021 #> phi_3_3    -0.6930 0.1726 5 -0.8167 -0.6266 #> sigma_1_1   0.2446 0.1077 5  0.1625  0.4250 #> sigma_2_1   0.0220 0.0236 5 -0.0174  0.0263 #> sigma_3_1  -0.0500 0.0211 5 -0.0332 -0.0332 #> sigma_2_2   0.0707 0.0195 5  0.0634  0.0634 #> sigma_3_2   0.0154 0.0159 5 -0.0120  0.0209 #> sigma_3_3   0.0755 0.0206 5  0.0514  0.0888 #> theta_1_1   0.2000 0.0142 5  0.1801  0.2108 #> theta_2_2   0.2000 0.0087 5  0.1861  0.2011 #> theta_3_3   0.2000 0.0144 5  0.1922  0.2267 #> mu0_1_1     0.0000 0.6809 5 -0.4372  0.9313 #> mu0_2_1     0.0000 0.4397 5 -0.1859  0.7155 #> mu0_3_1     0.0000 0.2297 5 -0.1822  0.0821 #> sigma0_1_1  1.0000 1.0956 5  0.2230  2.6974 #> sigma0_2_1  0.2000 0.4511 5 -0.1096  0.8534 #> sigma0_3_1  0.2000 0.3841 5 -0.1307  0.7473 #> sigma0_2_2  1.0000 0.3348 5  0.5082  1.1683 #> sigma0_3_2  0.2000 0.2903 5 -0.2039  0.3104 #> sigma0_3_3  1.0000 0.8905 5  0.2426  2.3748"},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-ssm.html","id":"model","dir":"Articles","previous_headings":"","what":"Model","title":"Parametric Bootstrap (The State Space Model)","text":"measurement model given 𝐲i,t=𝛎+𝚲𝛈i,t+𝛆i,t,with𝛆i,t∼𝒩(𝟎,𝚯)\\begin{equation}   \\mathbf{y}_{, t}   =   \\boldsymbol{\\nu}   +   \\boldsymbol{\\Lambda}   \\boldsymbol{\\eta}_{, t}   +   \\boldsymbol{\\varepsilon}_{, t},   \\quad   \\mathrm{}   \\quad   \\boldsymbol{\\varepsilon}_{, t}   \\sim   \\mathcal{N}   \\left(   \\mathbf{0},   \\boldsymbol{\\Theta}   \\right) \\end{equation} 𝐲i,t\\mathbf{y}_{, t}, 𝛈i,t\\boldsymbol{\\eta}_{, t}, 𝛆i,t\\boldsymbol{\\varepsilon}_{, t} random variables 𝛎\\boldsymbol{\\nu}, 𝚲\\boldsymbol{\\Lambda}, 𝚯\\boldsymbol{\\Theta} model parameters. 𝐲i,t\\mathbf{y}_{, t} represents vector observed random variables, 𝛈i,t\\boldsymbol{\\eta}_{, t} vector latent random variables, 𝛆i,t\\boldsymbol{\\varepsilon}_{, t} vector random measurement errors, time tt individual ii. 𝛎\\boldsymbol{\\nu} denotes vector intercepts, 𝚲\\boldsymbol{\\Lambda} matrix factor loadings, 𝚯\\boldsymbol{\\Theta} covariance matrix 𝛆\\boldsymbol{\\varepsilon}. alternative representation measurement error given 𝛆i,t=𝚯12𝐳i,t,with𝐳i,t∼𝒩(𝟎,𝐈)\\begin{equation}   \\boldsymbol{\\varepsilon}_{, t}   =   \\boldsymbol{\\Theta}^{\\frac{1}{2}}   \\mathbf{z}_{, t},   \\quad   \\mathrm{}   \\quad   \\mathbf{z}_{, t}   \\sim   \\mathcal{N}   \\left(   \\mathbf{0},   \\mathbf{}   \\right) \\end{equation} 𝐳i,t\\mathbf{z}_{, t} vector independent standard normal random variables (𝚯12)(𝚯12)′=𝚯\\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right) \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime} = \\boldsymbol{\\Theta} . dynamic structure given 𝛈i,t=𝛂+𝛃𝛈i,t−1+𝛇i,t,with𝛇i,t∼𝒩(𝟎,𝚿)\\begin{equation}   \\boldsymbol{\\eta}_{, t}   =   \\boldsymbol{\\alpha}   +   \\boldsymbol{\\beta}   \\boldsymbol{\\eta}_{, t - 1}   +   \\boldsymbol{\\zeta}_{, t},   \\quad   \\mathrm{}   \\quad   \\boldsymbol{\\zeta}_{, t}   \\sim   \\mathcal{N}   \\left(   \\mathbf{0},   \\boldsymbol{\\Psi}   \\right) \\end{equation} 𝛈i,t\\boldsymbol{\\eta}_{, t}, 𝛈i,t−1\\boldsymbol{\\eta}_{, t - 1}, 𝛇i,t\\boldsymbol{\\zeta}_{, t} random variables, 𝛂\\boldsymbol{\\alpha}, 𝛃\\boldsymbol{\\beta}, 𝚿\\boldsymbol{\\Psi} model parameters. , 𝛈i,t\\boldsymbol{\\eta}_{, t} vector latent variables time tt individual ii, 𝛈i,t−1\\boldsymbol{\\eta}_{, t - 1} represents vector latent variables time t−1t - 1 individual ii, 𝛇i,t\\boldsymbol{\\zeta}_{, t} represents vector dynamic noise time tt individual ii. 𝛂\\boldsymbol{\\alpha} denotes vector intercepts, 𝛃\\boldsymbol{\\beta} matrix autoregression cross regression coefficients, 𝚿\\boldsymbol{\\Psi} covariance matrix 𝛇i,t\\boldsymbol{\\zeta}_{, t}. alternative representation dynamic noise given 𝛇i,t=𝚿12𝐳i,t,with𝐳i,t∼𝒩(𝟎,𝐈)\\begin{equation}   \\boldsymbol{\\zeta}_{, t}   =   \\boldsymbol{\\Psi}^{\\frac{1}{2}}   \\mathbf{z}_{, t},   \\quad   \\mathrm{}   \\quad   \\mathbf{z}_{, t}   \\sim   \\mathcal{N}   \\left(   \\mathbf{0},   \\mathbf{}   \\right) \\end{equation} (𝚿12)(𝚿12)′=𝚿\\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right) \\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right)^{\\prime} = \\boldsymbol{\\Psi} .","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-ssm.html","id":"notation","dir":"Articles","previous_headings":"Parameters","what":"Notation","title":"Parametric Bootstrap (The State Space Model)","text":"Let t=100t = 100 number time points n=5n = 5 number individuals. Let measurement model intecept vector 𝛎\\boldsymbol{\\nu} given 𝛎=(000).\\begin{equation} \\boldsymbol{\\nu} = \\left( \\begin{array}{c}   0 \\\\   0 \\\\   0 \\\\ \\end{array} \\right) . \\end{equation} Let factor loadings matrix 𝚲\\boldsymbol{\\Lambda} given 𝚲=(100010001).\\begin{equation} \\boldsymbol{\\Lambda} = \\left( \\begin{array}{ccc}   1 & 0 & 0 \\\\   0 & 1 & 0 \\\\   0 & 0 & 1 \\\\ \\end{array} \\right) . \\end{equation} Let measurement error covariance matrix 𝚯\\boldsymbol{\\Theta} given 𝚯=(0.20000.20000.2).\\begin{equation} \\boldsymbol{\\Theta} = \\left( \\begin{array}{ccc}   0.2 & 0 & 0 \\\\   0 & 0.2 & 0 \\\\   0 & 0 & 0.2 \\\\ \\end{array} \\right) . \\end{equation} Let initial condition 𝛈0\\boldsymbol{\\eta}_{0} given 𝛈0∼𝒩(𝛍𝛈∣0,𝚺𝛈∣0)\\begin{equation} \\boldsymbol{\\eta}_{0} \\sim \\mathcal{N} \\left( \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}, \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} \\right) \\end{equation} 𝛍𝛈∣0=(000)\\begin{equation} \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0} = \\left( \\begin{array}{c}   0 \\\\   0 \\\\   0 \\\\ \\end{array} \\right) \\end{equation} 𝚺𝛈∣0=(10.20.20.210.20.20.21).\\begin{equation} \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} = \\left( \\begin{array}{ccc}   1 & 0.2 & 0.2 \\\\   0.2 & 1 & 0.2 \\\\   0.2 & 0.2 & 1 \\\\ \\end{array} \\right) . \\end{equation} Let constant vector 𝛂\\boldsymbol{\\alpha} given 𝛂=(000).\\begin{equation} \\boldsymbol{\\alpha} = \\left( \\begin{array}{c}   0 \\\\   0 \\\\   0 \\\\ \\end{array} \\right) . \\end{equation} Let transition matrix 𝛃\\boldsymbol{\\beta} given 𝛃=(0.7000.50.60−0.10.40.5).\\begin{equation} \\boldsymbol{\\beta} = \\left( \\begin{array}{ccc}   0.7 & 0 & 0 \\\\   0.5 & 0.6 & 0 \\\\   -0.1 & 0.4 & 0.5 \\\\ \\end{array} \\right) . \\end{equation} Let dynamic process noise 𝚿\\boldsymbol{\\Psi} given 𝚿=(0.10000.10000.1).\\begin{equation} \\boldsymbol{\\Psi} = \\left( \\begin{array}{ccc}   0.1 & 0 & 0 \\\\   0 & 0.1 & 0 \\\\   0 & 0 & 0.1 \\\\ \\end{array} \\right) . \\end{equation}","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-ssm.html","id":"r-function-arguments","dir":"Articles","previous_headings":"Parameters","what":"R Function Arguments","title":"Parametric Bootstrap (The State Space Model)","text":"","code":"n #> [1] 5 time #> [1] 100 mu0 #> [1] 0 0 0 sigma0 #>      [,1] [,2] [,3] #> [1,]  1.0  0.2  0.2 #> [2,]  0.2  1.0  0.2 #> [3,]  0.2  0.2  1.0 sigma0_l # sigma0_l <- t(chol(sigma0)) #>      [,1]      [,2]      [,3] #> [1,]  1.0 0.0000000 0.0000000 #> [2,]  0.2 0.9797959 0.0000000 #> [3,]  0.2 0.1632993 0.9660918 alpha #> [1] 0 0 0 beta #>      [,1] [,2] [,3] #> [1,]  0.7  0.0  0.0 #> [2,]  0.5  0.6  0.0 #> [3,] -0.1  0.4  0.5 psi #>      [,1] [,2] [,3] #> [1,]  0.1  0.0  0.0 #> [2,]  0.0  0.1  0.0 #> [3,]  0.0  0.0  0.1 psi_l # psi_l <- t(chol(psi)) #>           [,1]      [,2]      [,3] #> [1,] 0.3162278 0.0000000 0.0000000 #> [2,] 0.0000000 0.3162278 0.0000000 #> [3,] 0.0000000 0.0000000 0.3162278 nu #> [1] 0 0 0 lambda #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 theta #>      [,1] [,2] [,3] #> [1,]  0.2  0.0  0.0 #> [2,]  0.0  0.2  0.0 #> [3,]  0.0  0.0  0.2 theta_l # theta_l <- t(chol(theta)) #>           [,1]      [,2]      [,3] #> [1,] 0.4472136 0.0000000 0.0000000 #> [2,] 0.0000000 0.4472136 0.0000000 #> [3,] 0.0000000 0.0000000 0.4472136"},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-ssm.html","id":"parametric-bootstrap","dir":"Articles","previous_headings":"Parameters","what":"Parametric Bootstrap","title":"Parametric Bootstrap (The State Space Model)","text":"use PBSSMFixed function bootStateSpace package perform parametric bootstraping using parameters described . argument R specifies number bootstrap replications. generated data model estimates stored path using specified prefix file names. ncores = parallel::detectCores() argument instructs function use available CPU cores system. NOTE: Fitting state space model multiple times computationally intensive.","code":"R <- 5L # use at least 1000 in actual research path <- getwd() prefix <- \"ssm\" library(bootStateSpace) pb <- PBSSMFixed(   R = R,   path = path,   prefix = prefix,   n = n,   time = time,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = parallel::detectCores(),   seed = 42 ) summary(pb) #> Call: #> PBSSMFixed(R = R, path = path, prefix = prefix, n = n, time = time,  #>     mu0 = mu0, sigma0_l = sigma0_l, alpha = alpha, beta = beta,  #>     psi_l = psi_l, nu = nu, lambda = lambda, theta_l = theta_l,  #>     ncores = parallel::detectCores(), seed = 42) #>  #> Parametric bootstrap confidence intervals. #> type = \"pc\" #>             est     se R    2.5%   97.5% #> beta_1_1    0.7 0.4170 5  0.3261  1.3107 #> beta_2_1    0.5 0.5956 5  0.1454  1.5145 #> beta_3_1   -0.1 0.1380 5 -0.1107  0.1986 #> beta_1_2    0.0 0.2327 5 -0.2269  0.3291 #> beta_2_2    0.6 0.3072 5  0.1526  0.8931 #> beta_3_2    0.4 0.1743 5  0.1203  0.5438 #> beta_1_3    0.0 0.0484 5 -0.0955  0.0258 #> beta_2_3    0.0 0.0407 5 -0.1454 -0.0515 #> beta_3_3    0.5 0.1057 5  0.4244  0.6536 #> psi_1_1     0.1 0.1220 5  0.0108  0.2875 #> psi_2_2     0.1 0.0307 5  0.0567  0.1305 #> psi_3_3     0.1 0.0202 5  0.0124  0.0638 #> theta_1_1   0.2 0.1334 5  0.0048  0.3213 #> theta_2_2   0.2 0.0552 5  0.1362  0.2610 #> theta_3_3   0.2 0.0248 5  0.2147  0.2765 #> mu0_1_1     0.0 0.2816 5 -0.2773  0.3742 #> mu0_2_1     0.0 0.2465 5 -0.3723  0.1683 #> mu0_3_1     0.0 0.4300 5 -0.0405  0.9278 #> sigma0_1_1  1.0 0.8096 5  0.1506  1.7762 #> sigma0_2_1  0.2 0.0816 5  0.2369  0.4238 #> sigma0_3_1  0.2 0.5290 5 -0.3161  1.0294 #> sigma0_2_2  1.0 0.3498 5  0.1730  0.9489 #> sigma0_3_2  0.2 0.4938 5 -0.2606  0.9392 #> sigma0_3_3  1.0 0.6481 5  0.5469  1.9850 summary(pb, type = \"bc\") #> Call: #> PBSSMFixed(R = R, path = path, prefix = prefix, n = n, time = time,  #>     mu0 = mu0, sigma0_l = sigma0_l, alpha = alpha, beta = beta,  #>     psi_l = psi_l, nu = nu, lambda = lambda, theta_l = theta_l,  #>     ncores = parallel::detectCores(), seed = 42) #>  #> Parametric bootstrap confidence intervals. #> type = \"bc\" #>             est     se R    2.5%   97.5% #> beta_1_1    0.7 0.4170 5  0.5577  1.3789 #> beta_2_1    0.5 0.5956 5  0.1712  1.5954 #> beta_3_1   -0.1 0.1380 5 -0.1131 -0.0559 #> beta_1_2    0.0 0.2327 5 -0.2435  0.3136 #> beta_2_2    0.6 0.3072 5  0.1017  0.7274 #> beta_3_2    0.4 0.1743 5  0.1686  0.5489 #> beta_1_3    0.0 0.0484 5 -0.0494  0.0304 #> beta_2_3    0.0 0.0407 5 -0.0504 -0.0504 #> beta_3_3    0.5 0.1057 5  0.4241  0.6424 #> psi_1_1     0.1 0.1220 5  0.0001  0.1906 #> psi_2_2     0.1 0.0307 5  0.0590  0.1329 #> psi_3_3     0.1 0.0202 5  0.0658  0.0658 #> theta_1_1   0.2 0.1334 5  0.0139  0.3309 #> theta_2_2   0.2 0.0552 5  0.1337  0.2567 #> theta_3_3   0.2 0.0248 5  0.2110  0.2110 #> mu0_1_1     0.0 0.2816 5 -0.3137  0.1883 #> mu0_2_1     0.0 0.2465 5 -0.4163  0.1375 #> mu0_3_1     0.0 0.4300 5 -0.0510  0.4663 #> sigma0_1_1  1.0 0.8096 5  0.1522  1.7854 #> sigma0_2_1  0.2 0.0816 5  0.2347  0.2347 #> sigma0_3_1  0.2 0.5290 5 -0.3577  0.8921 #> sigma0_2_2  1.0 0.3498 5  0.9555  0.9555 #> sigma0_3_2  0.2 0.4938 5 -0.2970  0.8925 #> sigma0_3_3  1.0 0.6481 5  0.5782  2.0099"},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-var.html","id":"model","dir":"Articles","previous_headings":"","what":"Model","title":"Parametric Bootstrap (The Vector Autoregressive Model)","text":"measurement model given 𝐲i,t=𝛈i,t\\begin{equation}   \\mathbf{y}_{, t}   =   \\boldsymbol{\\eta}_{, t} \\end{equation} 𝐲i,t\\mathbf{y}_{, t} represents vector observed variables 𝛈i,t\\boldsymbol{\\eta}_{, t} vector latent variables individual ii time tt. Since observed latent variables equal, generate data dynamic structure. dynamic structure given 𝛈i,t=𝛂+𝛃𝛈i,t−1+𝛇i,t,with𝛇i,t∼𝒩(𝟎,𝚿)\\begin{equation}   \\boldsymbol{\\eta}_{, t}   =   \\boldsymbol{\\alpha}   +   \\boldsymbol{\\beta}   \\boldsymbol{\\eta}_{, t - 1}   +   \\boldsymbol{\\zeta}_{, t},   \\quad   \\mathrm{}   \\quad   \\boldsymbol{\\zeta}_{, t}   \\sim   \\mathcal{N}   \\left(   \\mathbf{0},   \\boldsymbol{\\Psi}   \\right) \\end{equation} 𝛈i,t\\boldsymbol{\\eta}_{, t}, 𝛈i,t−1\\boldsymbol{\\eta}_{, t - 1}, 𝛇i,t\\boldsymbol{\\zeta}_{, t} random variables, 𝛂\\boldsymbol{\\alpha}, 𝛃\\boldsymbol{\\beta}, 𝚿\\boldsymbol{\\Psi} model parameters. , 𝛈i,t\\boldsymbol{\\eta}_{, t} vector latent variables time tt individual ii, 𝛈i,t−1\\boldsymbol{\\eta}_{, t - 1} represents vector latent variables time t−1t - 1 individual ii, 𝛇i,t\\boldsymbol{\\zeta}_{, t} represents vector dynamic noise time tt individual ii. 𝛂\\boldsymbol{\\alpha} denotes vector intercepts, 𝛃\\boldsymbol{\\beta} matrix autoregression cross regression coefficients, 𝚿\\boldsymbol{\\Psi} covariance matrix 𝛇i,t\\boldsymbol{\\zeta}_{, t}. alternative representation dynamic noise given 𝛇i,t=𝚿12𝐳i,t,with𝐳i,t∼𝒩(𝟎,𝐈)\\begin{equation}   \\boldsymbol{\\zeta}_{, t}   =   \\boldsymbol{\\Psi}^{\\frac{1}{2}}   \\mathbf{z}_{, t},   \\quad   \\mathrm{}   \\quad   \\mathbf{z}_{, t}   \\sim   \\mathcal{N}   \\left(   \\mathbf{0},   \\mathbf{}   \\right) \\end{equation} (𝚿12)(𝚿12)′=𝚿\\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right) \\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right)^{\\prime} = \\boldsymbol{\\Psi} .","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-var.html","id":"notation","dir":"Articles","previous_headings":"Parameters","what":"Notation","title":"Parametric Bootstrap (The Vector Autoregressive Model)","text":"Let t=100t = 100 number time points n=5n = 5 number individuals. Let initial condition 𝛈0\\boldsymbol{\\eta}_{0} given 𝛈0∼𝒩(𝛍𝛈∣0,𝚺𝛈∣0)\\begin{equation} \\boldsymbol{\\eta}_{0} \\sim \\mathcal{N} \\left( \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}, \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} \\right) \\end{equation} 𝛍𝛈∣0=(000)\\begin{equation} \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0} = \\left( \\begin{array}{c}   0 \\\\   0 \\\\   0 \\\\ \\end{array} \\right) \\end{equation} 𝚺𝛈∣0=(10.20.20.210.20.20.21).\\begin{equation} \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} = \\left( \\begin{array}{ccc}   1 & 0.2 & 0.2 \\\\   0.2 & 1 & 0.2 \\\\   0.2 & 0.2 & 1 \\\\ \\end{array} \\right) . \\end{equation} Let constant vector 𝛂\\boldsymbol{\\alpha} given 𝛂=(000).\\begin{equation} \\boldsymbol{\\alpha} = \\left( \\begin{array}{c}   0 \\\\   0 \\\\   0 \\\\ \\end{array} \\right) . \\end{equation} Let transition matrix 𝛃\\boldsymbol{\\beta} given 𝛃=(0.7000.50.60−0.10.40.5).\\begin{equation} \\boldsymbol{\\beta} = \\left( \\begin{array}{ccc}   0.7 & 0 & 0 \\\\   0.5 & 0.6 & 0 \\\\   -0.1 & 0.4 & 0.5 \\\\ \\end{array} \\right) . \\end{equation} Let dynamic process noise 𝚿\\boldsymbol{\\Psi} given 𝚿=(0.10000.10000.1).\\begin{equation} \\boldsymbol{\\Psi} = \\left( \\begin{array}{ccc}   0.1 & 0 & 0 \\\\   0 & 0.1 & 0 \\\\   0 & 0 & 0.1 \\\\ \\end{array} \\right) . \\end{equation}","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-var.html","id":"r-function-arguments","dir":"Articles","previous_headings":"Parameters","what":"R Function Arguments","title":"Parametric Bootstrap (The Vector Autoregressive Model)","text":"","code":"n #> [1] 5 time #> [1] 100 mu0 #> [1] 0 0 0 sigma0 #>      [,1] [,2] [,3] #> [1,]  1.0  0.2  0.2 #> [2,]  0.2  1.0  0.2 #> [3,]  0.2  0.2  1.0 sigma0_l # sigma0_l <- t(chol(sigma0)) #>      [,1]      [,2]      [,3] #> [1,]  1.0 0.0000000 0.0000000 #> [2,]  0.2 0.9797959 0.0000000 #> [3,]  0.2 0.1632993 0.9660918 alpha #> [1] 0 0 0 beta #>      [,1] [,2] [,3] #> [1,]  0.7  0.0  0.0 #> [2,]  0.5  0.6  0.0 #> [3,] -0.1  0.4  0.5 psi #>      [,1] [,2] [,3] #> [1,]  0.1  0.0  0.0 #> [2,]  0.0  0.1  0.0 #> [3,]  0.0  0.0  0.1 psi_l # psi_l <- t(chol(psi)) #>           [,1]      [,2]      [,3] #> [1,] 0.3162278 0.0000000 0.0000000 #> [2,] 0.0000000 0.3162278 0.0000000 #> [3,] 0.0000000 0.0000000 0.3162278"},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/pb-var.html","id":"parametric-bootstrap","dir":"Articles","previous_headings":"Parameters","what":"Parametric Bootstrap","title":"Parametric Bootstrap (The Vector Autoregressive Model)","text":"use PBSSMVARFixed function bootStateSpace package perform parametric bootstraping using parameters described . argument R specifies number bootstrap replications. generated data model estimates stored path using specified prefix file names. ncores = parallel::detectCores() argument instructs function use available CPU cores system. NOTE: Fitting VAR model multiple times computationally intensive.","code":"R <- 5L # use at least 1000 in actual research path <- getwd() prefix <- \"var\" library(bootStateSpace) pb <- PBSSMVARFixed(   R = R,   path = path,   prefix = prefix,   n = n,   time = time,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   ncores = parallel::detectCores(),   seed = 42 ) summary(pb) #> Call: #> PBSSMVARFixed(R = R, path = path, prefix = prefix, n = n, time = time,  #>     mu0 = mu0, sigma0_l = sigma0_l, alpha = alpha, beta = beta,  #>     psi_l = psi_l, ncores = parallel::detectCores(), seed = 42) #>  #> Parametric bootstrap confidence intervals. #> type = \"pc\" #>             est     se R    2.5%   97.5% #> beta_1_1    0.7 0.0459 5  0.6836  0.7894 #> beta_2_1    0.5 0.0321 5  0.4575  0.5389 #> beta_3_1   -0.1 0.0419 5 -0.1341 -0.0387 #> beta_1_2    0.0 0.0276 5 -0.0418  0.0258 #> beta_2_2    0.6 0.0241 5  0.5752  0.6328 #> beta_3_2    0.4 0.0322 5  0.3494  0.4238 #> beta_1_3    0.0 0.0207 5 -0.0328  0.0177 #> beta_2_3    0.0 0.0247 5 -0.0397  0.0191 #> beta_3_3    0.5 0.0123 5  0.4911  0.5222 #> psi_1_1     0.1 0.0033 5  0.0973  0.1051 #> psi_2_2     0.1 0.0015 5  0.0942  0.0977 #> psi_3_3     0.1 0.0076 5  0.0923  0.1091 #> mu0_1_1     0.0 0.4536 5 -0.3634  0.7515 #> mu0_2_1     0.0 0.1817 5 -0.0562  0.3732 #> mu0_3_1     0.0 0.5320 5 -0.5889  0.5272 #> sigma0_1_1  1.0 0.6961 5  0.3144  1.9347 #> sigma0_2_1  0.2 0.3019 5  0.0687  0.7775 #> sigma0_3_1  0.2 0.5159 5 -0.1725  0.8275 #> sigma0_2_2  1.0 0.1340 5  0.4038  0.7118 #> sigma0_3_2  0.2 0.3213 5 -0.0593  0.7123 #> sigma0_3_3  1.0 0.9678 5  0.5511  2.7362 summary(pb, type = \"bc\") #> Call: #> PBSSMVARFixed(R = R, path = path, prefix = prefix, n = n, time = time,  #>     mu0 = mu0, sigma0_l = sigma0_l, alpha = alpha, beta = beta,  #>     psi_l = psi_l, ncores = parallel::detectCores(), seed = 42) #>  #> Parametric bootstrap confidence intervals. #> type = \"bc\" #>             est     se R    2.5%   97.5% #> beta_1_1    0.7 0.0459 5  0.6831  0.7736 #> beta_2_1    0.5 0.0321 5  0.4550  0.5327 #> beta_3_1   -0.1 0.0419 5 -0.1178 -0.0312 #> beta_1_2    0.0 0.0276 5 -0.0351  0.0268 #> beta_2_2    0.6 0.0241 5  0.5784  0.6338 #> beta_3_2    0.4 0.0322 5  0.3455  0.4233 #> beta_1_3    0.0 0.0207 5 -0.0304  0.0190 #> beta_2_3    0.0 0.0247 5 -0.0173  0.0217 #> beta_3_3    0.5 0.0123 5  0.4899  0.5056 #> psi_1_1     0.1 0.0033 5  0.0967  0.1034 #> psi_2_2     0.1 0.0015 5  0.0977  0.0977 #> psi_3_3     0.1 0.0076 5  0.0936  0.1105 #> mu0_1_1     0.0 0.4536 5 -0.3905  0.6794 #> mu0_2_1     0.0 0.1817 5 -0.0629  0.0851 #> mu0_3_1     0.0 0.5320 5 -0.6157  0.5222 #> sigma0_1_1  1.0 0.6961 5  0.5943  2.0640 #> sigma0_2_1  0.2 0.3019 5  0.0616  0.7105 #> sigma0_3_1  0.2 0.5159 5 -0.1670  0.8306 #> sigma0_2_2  1.0 0.1340 5  0.7282  0.7282 #> sigma0_3_2  0.2 0.3213 5 -0.0906  0.4165 #> sigma0_3_3  1.0 0.9678 5  0.5924  2.8717"},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/session.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"bootStateSpace: Session","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] bootStateSpace_1.0.3.9000 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6        shape_1.4.6.1       xfun_0.53           #>  [4] ggplot2_4.0.0       ks_1.15.1           lattice_0.22-7      #>  [7] numDeriv_2016.8-1.1 bitops_1.0-9        vctrs_0.6.5         #> [10] tools_4.5.1         Rdpack_2.6.4        generics_0.1.4      #> [13] parallel_4.5.1      tibble_3.3.0        cluster_2.1.8.1     #> [16] pan_1.9             pkgconfig_2.0.3     fds_1.8             #> [19] jomo_2.7-6          Matrix_1.7-3        KernSmooth_2.23-26  #> [22] RColorBrewer_1.1-3  S7_0.2.0            lifecycle_1.0.4     #> [25] compiler_4.5.1      farver_2.1.2        stringr_1.5.2       #> [28] codetools_0.2-20    carData_3.0-5       rainbow_3.8         #> [31] RCurl_1.98-1.17     glmnet_4.1-10       Formula_1.2-5       #> [34] pracma_2.4.4        mice_3.18.0         car_3.1-3           #> [37] pillar_1.11.1       nloptr_2.2.1        tidyr_1.3.1         #> [40] MASS_7.3-65         reformulas_0.4.1    iterators_1.0.14    #> [43] abind_1.4-8         rpart_4.1.24        boot_1.3-31         #> [46] rProject_0.0.21     mclust_6.1.1        foreach_1.5.2       #> [49] mitml_0.4-5         nlme_3.1-168        tidyselect_1.2.1    #> [52] mvtnorm_1.3-3       stringi_1.8.7       dplyr_1.1.4         #> [55] reshape2_1.4.4      purrr_1.1.0         splines_4.5.1       #> [58] pcaPP_2.0-5         latex2exp_0.9.6     grid_4.5.1          #> [61] colorspace_2.1-2    expm_1.0-0          cli_3.6.5.9000      #> [64] magrittr_2.0.4      survival_3.8-3      broom_1.0.10        #> [67] scales_1.4.0        backports_1.5.0     dynr_0.1.16-114     #> [70] nnet_7.3-20         lme4_1.1-37         deSolve_1.40        #> [73] evaluate_1.0.5      knitr_1.50          rbibutils_2.3       #> [76] rlang_1.1.6         Rcpp_1.1.0          hdrcde_3.4          #> [79] xtable_1.8-4        glue_1.8.0          fda_6.3.0           #> [82] minqa_1.2.8         R6_2.6.1            plyr_1.8.9"},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/session.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"bootStateSpace: Session","text":"","code":"installed.packages()[, c(\"Package\", \"Version\")] #>                   Package             Version       #> bootStateSpace    \"bootStateSpace\"    \"1.0.3.9000\"  #> simStateSpace     \"simStateSpace\"     \"1.2.12\"      #> abind             \"abind\"             \"1.4-8\"       #> Amelia            \"Amelia\"            \"1.8.3\"       #> arm               \"arm\"               \"1.14-4\"      #> arrow             \"arrow\"             \"21.0.0.1\"    #> ash               \"ash\"               \"1.0-15\"      #> askpass           \"askpass\"           \"1.2.1\"       #> assertthat        \"assertthat\"        \"0.2.1\"       #> backports         \"backports\"         \"1.5.0\"       #> base64enc         \"base64enc\"         \"0.1-3\"       #> betaDelta         \"betaDelta\"         \"1.0.6\"       #> betaMC            \"betaMC\"            \"1.3.3\"       #> betaNB            \"betaNB\"            \"1.0.6\"       #> betaSandwich      \"betaSandwich\"      \"1.0.8\"       #> BH                \"BH\"                \"1.87.0-1\"    #> bibtex            \"bibtex\"            \"0.5.1\"       #> BiocManager       \"BiocManager\"       \"1.30.26\"     #> bit               \"bit\"               \"4.6.0\"       #> bit64             \"bit64\"             \"4.6.0-1\"     #> bitops            \"bitops\"            \"1.0-9\"       #> blob              \"blob\"              \"1.2.4\"       #> bootStateSpace    \"bootStateSpace\"    \"1.0.3\"       #> brew              \"brew\"              \"1.0-10\"      #> brio              \"brio\"              \"1.1.5\"       #> broom             \"broom\"             \"1.0.10\"      #> bslib             \"bslib\"             \"0.9.0\"       #> cachem            \"cachem\"            \"1.1.0\"       #> callr             \"callr\"             \"3.7.6\"       #> car               \"car\"               \"3.1-3\"       #> caracas           \"caracas\"           \"2.1.1\"       #> carData           \"carData\"           \"3.0-5\"       #> cellranger        \"cellranger\"        \"1.1.0\"       #> cffr              \"cffr\"              \"1.2.0\"       #> checkmate         \"checkmate\"         \"2.3.3\"       #> cli               \"cli\"               \"3.6.5.9000\"  #> clipr             \"clipr\"             \"0.8.0\"       #> clock             \"clock\"             \"0.7.3\"       #> clusterGeneration \"clusterGeneration\" \"1.3.8\"       #> coda              \"coda\"              \"0.19-4.1\"    #> cOde              \"cOde\"              \"1.1.1\"       #> collections       \"collections\"       \"0.3.9\"       #> colorspace        \"colorspace\"        \"2.1-2\"       #> commonmark        \"commonmark\"        \"2.0.0\"       #> conflicted        \"conflicted\"        \"1.2.0\"       #> corpcor           \"corpcor\"           \"1.6.10\"      #> covr              \"covr\"              \"3.6.4\"       #> cowplot           \"cowplot\"           \"1.2.0\"       #> cpp11             \"cpp11\"             \"0.5.2\"       #> crayon            \"crayon\"            \"1.5.3\"       #> credentials       \"credentials\"       \"2.0.3\"       #> crosstalk         \"crosstalk\"         \"1.2.2\"       #> cTMed             \"cTMed\"             \"1.0.8\"       #> ctsem             \"ctsem\"             \"3.10.4\"      #> curl              \"curl\"              \"7.0.0\"       #> data.table        \"data.table\"        \"1.17.8\"      #> DBI               \"DBI\"               \"1.2.3\"       #> dbplyr            \"dbplyr\"            \"2.5.1\"       #> Deriv             \"Deriv\"             \"4.2.0\"       #> desc              \"desc\"              \"1.4.3\"       #> deSolve           \"deSolve\"           \"1.40\"        #> devtools          \"devtools\"          \"2.4.6.9000\"  #> diagram           \"diagram\"           \"1.6.5\"       #> dials             \"dials\"             \"1.4.2\"       #> DiceDesign        \"DiceDesign\"        \"1.10\"        #> diffobj           \"diffobj\"           \"0.3.6\"       #> digest            \"digest\"            \"0.6.37\"      #> distributional    \"distributional\"    \"0.5.0\"       #> distro            \"distro\"            \"0.1.1\"       #> doBy              \"doBy\"              \"4.7.0\"       #> docopt            \"docopt\"            \"0.7.2\"       #> downlit           \"downlit\"           \"0.4.4\"       #> dplyr             \"dplyr\"             \"1.1.4\"       #> DT                \"DT\"                \"0.34.0\"      #> dtplyr            \"dtplyr\"            \"1.3.2\"       #> duckdb            \"duckdb\"            \"1.4.0\"       #> dynr              \"dynr\"              \"0.1.16-114\"  #> dynUtils          \"dynUtils\"          \"0.9.1\"       #> ellipse           \"ellipse\"           \"0.5.0\"       #> ellipsis          \"ellipsis\"          \"0.3.2\"       #> evaluate          \"evaluate\"          \"1.0.5\"       #> expm              \"expm\"              \"1.0-0\"       #> fansi             \"fansi\"             \"1.0.6\"       #> farver            \"farver\"            \"2.1.2\"       #> fastDummies       \"fastDummies\"       \"1.7.5\"       #> fastmap           \"fastmap\"           \"1.2.0\"       #> fclust            \"fclust\"            \"2.1.2\"       #> fda               \"fda\"               \"6.3.0\"       #> fdrtool           \"fdrtool\"           \"1.2.18\"      #> fds               \"fds\"               \"1.8\"         #> fitDTVARMx        \"fitDTVARMx\"        \"0.0.0.9000\"  #> FNN               \"FNN\"               \"1.1.4.1\"     #> fontawesome       \"fontawesome\"       \"0.5.3\"       #> forcats           \"forcats\"           \"1.0.1\"       #> foreach           \"foreach\"           \"1.5.2\"       #> Formula           \"Formula\"           \"1.2-5\"       #> fs                \"fs\"                \"1.6.6\"       #> fst               \"fst\"               \"0.9.8\"       #> fstcore           \"fstcore\"           \"0.10.0\"      #> furrr             \"furrr\"             \"0.3.1\"       #> future            \"future\"            \"1.67.0\"      #> future.apply      \"future.apply\"      \"1.20.0\"      #> gargle            \"gargle\"            \"1.6.0\"       #> generics          \"generics\"          \"0.1.4\"       #> gert              \"gert\"              \"2.1.5\"       #> ggplot2           \"ggplot2\"           \"4.0.0\"       #> ggrepel           \"ggrepel\"           \"0.9.6\"       #> gh                \"gh\"                \"1.5.0\"       #> gitcreds          \"gitcreds\"          \"0.1.2\"       #> glasso            \"glasso\"            \"1.11\"        #> glmnet            \"glmnet\"            \"4.1-10\"      #> globals           \"globals\"           \"0.18.0\"      #> glue              \"glue\"              \"1.8.0\"       #> googledrive       \"googledrive\"       \"2.1.2\"       #> googlesheets4     \"googlesheets4\"     \"1.1.2\"       #> gower             \"gower\"             \"1.0.2\"       #> GPArotation       \"GPArotation\"       \"2025.3-1\"    #> GPfit             \"GPfit\"             \"1.0-9\"       #> graphicalVAR      \"graphicalVAR\"      \"0.3.4\"       #> gridExtra         \"gridExtra\"         \"2.3\"         #> gsubfn            \"gsubfn\"            \"0.7\"         #> gtable            \"gtable\"            \"0.3.6\"       #> gtools            \"gtools\"            \"3.9.5\"       #> hardhat           \"hardhat\"           \"1.4.2\"       #> haven             \"haven\"             \"2.5.5\"       #> hdrcde            \"hdrcde\"            \"3.4\"         #> here              \"here\"              \"1.0.2\"       #> highr             \"highr\"             \"0.11\"        #> Hmisc             \"Hmisc\"             \"5.2-4\"       #> hms               \"hms\"               \"1.1.3\"       #> htmlTable         \"htmlTable\"         \"2.4.3\"       #> htmltools         \"htmltools\"         \"0.5.8.1\"     #> htmlwidgets       \"htmlwidgets\"       \"1.6.4\"       #> httpuv            \"httpuv\"            \"1.6.16\"      #> httr              \"httr\"              \"1.4.7\"       #> httr2             \"httr2\"             \"1.2.1\"       #> ids               \"ids\"               \"1.0.1\"       #> ifaTools          \"ifaTools\"          \"0.23\"        #> igraph            \"igraph\"            \"2.1.4\"       #> infer             \"infer\"             \"1.0.9\"       #> ini               \"ini\"               \"0.3.1\"       #> inline            \"inline\"            \"0.3.21\"      #> ipred             \"ipred\"             \"0.9-15\"      #> isoband           \"isoband\"           \"0.2.7\"       #> iterators         \"iterators\"         \"1.0.14\"      #> jomo              \"jomo\"              \"2.7-6\"       #> jpeg              \"jpeg\"              \"0.1-11\"      #> jquerylib         \"jquerylib\"         \"0.1.4\"       #> jsonlite          \"jsonlite\"          \"2.0.0\"       #> jsonvalidate      \"jsonvalidate\"      \"1.5.0\"       #> kernlab           \"kernlab\"           \"0.9-33\"      #> knitr             \"knitr\"             \"1.50\"        #> ks                \"ks\"                \"1.15.1\"      #> labeling          \"labeling\"          \"0.4.3\"       #> Lahman            \"Lahman\"            \"13.0-0\"      #> languageserver    \"languageserver\"    \"0.3.16\"      #> later             \"later\"             \"1.4.4\"       #> latex2exp         \"latex2exp\"         \"0.9.6\"       #> lava              \"lava\"              \"1.8.1\"       #> lavaan            \"lavaan\"            \"0.6-20\"      #> lazyeval          \"lazyeval\"          \"0.2.2\"       #> lhs               \"lhs\"               \"1.2.0\"       #> lifecycle         \"lifecycle\"         \"1.0.4\"       #> lintr             \"lintr\"             \"3.2.0\"       #> listenv           \"listenv\"           \"0.9.1\"       #> litedown          \"litedown\"          \"0.7\"         #> littler           \"littler\"           \"0.3.21\"      #> lme4              \"lme4\"              \"1.1-37\"      #> locfit            \"locfit\"            \"1.5-9.12\"    #> longMI            \"longMI\"            \"1.0.0\"       #> loo               \"loo\"               \"2.8.0\"       #> lubridate         \"lubridate\"         \"1.9.4\"       #> magick            \"magick\"            \"2.9.0\"       #> magrittr          \"magrittr\"          \"2.0.4\"       #> markdown          \"markdown\"          \"2.0\"         #> MatrixModels      \"MatrixModels\"      \"0.5-4\"       #> matrixStats       \"matrixStats\"       \"1.5.0\"       #> mclust            \"mclust\"            \"6.1.1\"       #> memoise           \"memoise\"           \"2.0.1\"       #> metaSEM           \"metaSEM\"           \"1.5.0\"       #> metaVAR           \"metaVAR\"           \"0.0.0.9000\"  #> mice              \"mice\"              \"3.18.0\"      #> microbenchmark    \"microbenchmark\"    \"1.5.0\"       #> mime              \"mime\"              \"0.13\"        #> miniUI            \"miniUI\"            \"0.1.2\"       #> minqa             \"minqa\"             \"1.2.8\"       #> mitml             \"mitml\"             \"0.4-5\"       #> mize              \"mize\"              \"0.2.4\"       #> mlVAR             \"mlVAR\"             \"0.5.2\"       #> mnormt            \"mnormt\"            \"2.1.1\"       #> modeldata         \"modeldata\"         \"1.5.1\"       #> modelenv          \"modelenv\"          \"0.2.0\"       #> modelr            \"modelr\"            \"0.1.11\"      #> MplusAutomation   \"MplusAutomation\"   \"1.2\"         #> multicool         \"multicool\"         \"1.0.1\"       #> mvtnorm           \"mvtnorm\"           \"1.3-3\"       #> nloptr            \"nloptr\"            \"2.2.1\"       #> numDeriv          \"numDeriv\"          \"2016.8-1.1\"  #> nycflights13      \"nycflights13\"      \"1.0.2\"       #> OpenMx            \"OpenMx\"            \"2.22.9\"      #> openssl           \"openssl\"           \"2.3.4\"       #> ordinal           \"ordinal\"           \"2023.12-4.1\" #> pan               \"pan\"               \"1.9\"         #> pander            \"pander\"            \"0.6.6\"       #> parallelly        \"parallelly\"        \"1.45.1\"      #> parsnip           \"parsnip\"           \"1.3.3\"       #> patchwork         \"patchwork\"         \"1.3.2\"       #> pbapply           \"pbapply\"           \"1.7-4\"       #> pbivnorm          \"pbivnorm\"          \"0.6.0\"       #> pbkrtest          \"pbkrtest\"          \"0.5.5\"       #> pcaPP             \"pcaPP\"             \"2.0-5\"       #> pdftools          \"pdftools\"          \"3.6.0\"       #> pillar            \"pillar\"            \"1.11.1\"      #> pkgbuild          \"pkgbuild\"          \"1.4.8\"       #> pkgconfig         \"pkgconfig\"         \"2.0.3\"       #> pkgdown           \"pkgdown\"           \"2.1.3\"       #> pkgload           \"pkgload\"           \"1.4.1\"       #> plogr             \"plogr\"             \"0.2.0\"       #> plyr              \"plyr\"              \"1.8.9\"       #> png               \"png\"               \"0.1-8\"       #> posterior         \"posterior\"         \"1.6.1\"       #> pracma            \"pracma\"            \"2.4.4\"       #> praise            \"praise\"            \"1.0.0\"       #> prettyunits       \"prettyunits\"       \"1.2.0\"       #> printr            \"printr\"            \"0.3\"         #> processx          \"processx\"          \"3.8.6\"       #> prodlim           \"prodlim\"           \"2025.04.28\"  #> profvis           \"profvis\"           \"0.4.0\"       #> progress          \"progress\"          \"1.2.3\"       #> progressr         \"progressr\"         \"0.16.0\"      #> promises          \"promises\"          \"1.3.3\"       #> proto             \"proto\"             \"1.0.0\"       #> ps                \"ps\"                \"1.9.1\"       #> psych             \"psych\"             \"2.5.6\"       #> purrr             \"purrr\"             \"1.1.0\"       #> qgraph            \"qgraph\"            \"1.9.8\"       #> qpdf              \"qpdf\"              \"1.4.1\"       #> quadprog          \"quadprog\"          \"1.5-8\"       #> quantreg          \"quantreg\"          \"6.1\"         #> quarto            \"quarto\"            \"1.5.1\"       #> QuickJSR          \"QuickJSR\"          \"1.8.1\"       #> R.cache           \"R.cache\"           \"0.17.0\"      #> R.methodsS3       \"R.methodsS3\"       \"1.8.2\"       #> R.oo              \"R.oo\"              \"1.27.1\"      #> R.utils           \"R.utils\"           \"2.13.0\"      #> R2jags            \"R2jags\"            \"0.8-9\"       #> R2WinBUGS         \"R2WinBUGS\"         \"2.1-23\"      #> R6                \"R6\"                \"2.6.1\"       #> ragg              \"ragg\"              \"1.5.0\"       #> rainbow           \"rainbow\"           \"3.8\"         #> rappdirs          \"rappdirs\"          \"0.3.3\"       #> rbibutils         \"rbibutils\"         \"2.3\"         #> rcmdcheck         \"rcmdcheck\"         \"1.4.0\"       #> RColorBrewer      \"RColorBrewer\"      \"1.1-3\"       #> Rcpp              \"Rcpp\"              \"1.1.0\"       #> RcppArmadillo     \"RcppArmadillo\"     \"15.0.2-2\"    #> RcppEigen         \"RcppEigen\"         \"0.3.4.0.2\"   #> RcppGSL           \"RcppGSL\"           \"0.3.13\"      #> RcppParallel      \"RcppParallel\"      \"5.1.11-1\"    #> RcppTOML          \"RcppTOML\"          \"0.2.3\"       #> RCurl             \"RCurl\"             \"1.98-1.17\"   #> Rdpack            \"Rdpack\"            \"2.6.4\"       #> readr             \"readr\"             \"2.1.5\"       #> readxl            \"readxl\"            \"1.4.5\"       #> recipes           \"recipes\"           \"1.3.1\"       #> RefManageR        \"RefManageR\"        \"1.4.0\"       #> reformulas        \"reformulas\"        \"0.4.1\"       #> rematch           \"rematch\"           \"2.0.0\"       #> rematch2          \"rematch2\"          \"2.1.2\"       #> remotes           \"remotes\"           \"2.5.0\"       #> reprex            \"reprex\"            \"2.1.1\"       #> reshape2          \"reshape2\"          \"1.4.4\"       #> reticulate        \"reticulate\"        \"1.43.0\"      #> rex               \"rex\"               \"1.2.1\"       #> rhub              \"rhub\"              \"2.0.1\"       #> rjags             \"rjags\"             \"4-17\"        #> rlang             \"rlang\"             \"1.1.6\"       #> RMariaDB          \"RMariaDB\"          \"1.3.4\"       #> rmarkdown         \"rmarkdown\"         \"2.30\"        #> roxygen2          \"roxygen2\"          \"7.3.3.9000\"  #> rpf               \"rpf\"               \"1.0.15\"      #> RPostgres         \"RPostgres\"         \"1.4.8\"       #> rProject          \"rProject\"          \"0.0.21\"      #> rprojroot         \"rprojroot\"         \"2.1.1\"       #> rsample           \"rsample\"           \"1.3.1\"       #> RSQLite           \"RSQLite\"           \"2.4.3\"       #> rstan             \"rstan\"             \"2.32.7\"      #> rstantools        \"rstantools\"        \"2.5.0\"       #> rstudioapi        \"rstudioapi\"        \"0.17.1\"      #> rversions         \"rversions\"         \"3.0.0\"       #> rvest             \"rvest\"             \"1.0.5\"       #> Ryacas            \"Ryacas\"            \"1.1.5\"       #> S7                \"S7\"                \"0.2.0\"       #> sass              \"sass\"              \"0.4.10\"      #> scales            \"scales\"            \"1.4.0\"       #> selectr           \"selectr\"           \"0.4-2\"       #> semlbci           \"semlbci\"           \"0.11.3\"      #> semmcci           \"semmcci\"           \"1.1.5\"       #> sessioninfo       \"sessioninfo\"       \"1.2.3\"       #> sfd               \"sfd\"               \"0.1.0\"       #> shape             \"shape\"             \"1.4.6.1\"     #> shiny             \"shiny\"             \"1.11.1\"      #> simStateSpace     \"simStateSpace\"     \"1.2.12\"      #> slider            \"slider\"            \"0.3.2\"       #> snow              \"snow\"              \"0.4-4\"       #> snowfall          \"snowfall\"          \"1.84-6.3\"    #> sourcetools       \"sourcetools\"       \"0.1.7-1\"     #> SparseM           \"SparseM\"           \"1.84-2\"      #> sparsevctrs       \"sparsevctrs\"       \"0.3.4\"       #> SQUAREM           \"SQUAREM\"           \"2021.1\"      #> StanHeaders       \"StanHeaders\"       \"2.32.10\"     #> stringi           \"stringi\"           \"1.8.7\"       #> stringr           \"stringr\"           \"1.5.2\"       #> styler            \"styler\"            \"1.10.3\"      #> symSEM            \"symSEM\"            \"0.4\"         #> sys               \"sys\"               \"3.4.3\"       #> systemfonts       \"systemfonts\"       \"1.3.1\"       #> tailor            \"tailor\"            \"0.1.0\"       #> tensorA           \"tensorA\"           \"0.36.2.1\"    #> testthat          \"testthat\"          \"3.2.3\"       #> texreg            \"texreg\"            \"1.39.4\"      #> textshaping       \"textshaping\"       \"1.0.4\"       #> tibble            \"tibble\"            \"3.3.0\"       #> tidymodels        \"tidymodels\"        \"1.4.1\"       #> tidyr             \"tidyr\"             \"1.3.1\"       #> tidyselect        \"tidyselect\"        \"1.2.1\"       #> tidyverse         \"tidyverse\"         \"2.0.0\"       #> timechange        \"timechange\"        \"0.3.0\"       #> timeDate          \"timeDate\"          \"4041.110\"    #> tinytex           \"tinytex\"           \"0.57\"        #> tune              \"tune\"              \"2.0.0\"       #> tzdb              \"tzdb\"              \"0.5.0\"       #> ucminf            \"ucminf\"            \"1.2.2\"       #> urlchecker        \"urlchecker\"        \"1.0.1\"       #> usethis           \"usethis\"           \"3.2.1\"       #> utf8              \"utf8\"              \"1.2.6\"       #> uuid              \"uuid\"              \"1.2-1\"       #> V8                \"V8\"                \"8.0.1\"       #> vctrs             \"vctrs\"             \"0.6.5\"       #> viridisLite       \"viridisLite\"       \"0.4.2\"       #> vroom             \"vroom\"             \"1.6.6\"       #> waldo             \"waldo\"             \"0.6.2\"       #> warp              \"warp\"              \"0.2.1\"       #> whisker           \"whisker\"           \"0.4.1\"       #> whoami            \"whoami\"            \"1.3.0\"       #> withr             \"withr\"             \"3.0.2\"       #> workflows         \"workflows\"         \"1.3.0\"       #> workflowsets      \"workflowsets\"      \"1.1.1\"       #> xfun              \"xfun\"              \"0.53\"        #> xml2              \"xml2\"              \"1.4.0\"       #> xmlparsedata      \"xmlparsedata\"      \"1.0.5\"       #> xopen             \"xopen\"             \"1.0.1\"       #> xtable            \"xtable\"            \"1.8-4\"       #> yaml              \"yaml\"              \"2.3.10\"      #> yardstick         \"yardstick\"         \"1.3.2\"       #> zip               \"zip\"               \"2.3.3\"       #> base              \"base\"              \"4.5.1\"       #> boot              \"boot\"              \"1.3-31\"      #> class             \"class\"             \"7.3-23\"      #> cluster           \"cluster\"           \"2.1.8.1\"     #> codetools         \"codetools\"         \"0.2-20\"      #> compiler          \"compiler\"          \"4.5.1\"       #> datasets          \"datasets\"          \"4.5.1\"       #> foreign           \"foreign\"           \"0.8-90\"      #> graphics          \"graphics\"          \"4.5.1\"       #> grDevices         \"grDevices\"         \"4.5.1\"       #> grid              \"grid\"              \"4.5.1\"       #> KernSmooth        \"KernSmooth\"        \"2.23-26\"     #> lattice           \"lattice\"           \"0.22-7\"      #> MASS              \"MASS\"              \"7.3-65\"      #> Matrix            \"Matrix\"            \"1.7-3\"       #> methods           \"methods\"           \"4.5.1\"       #> mgcv              \"mgcv\"              \"1.9-3\"       #> nlme              \"nlme\"              \"3.1-168\"     #> nnet              \"nnet\"              \"7.3-20\"      #> parallel          \"parallel\"          \"4.5.1\"       #> rpart             \"rpart\"             \"4.1.24\"      #> spatial           \"spatial\"           \"7.3-18\"      #> splines           \"splines\"           \"4.5.1\"       #> stats             \"stats\"             \"4.5.1\"       #> stats4            \"stats4\"            \"4.5.1\"       #> survival          \"survival\"          \"3.8-3\"       #> tcltk             \"tcltk\"             \"4.5.1\"       #> tools             \"tools\"             \"4.5.1\"       #> utils             \"utils\"             \"4.5.1\""},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/session.html","id":"cpu","dir":"Articles","previous_headings":"","what":"CPU","title":"bootStateSpace: Session","text":"","code":"#> Architecture:                         x86_64 #> CPU op-mode(s):                       32-bit, 64-bit #> Address sizes:                        46 bits physical, 48 bits virtual #> Byte Order:                           Little Endian #> CPU(s):                               24 #> On-line CPU(s) list:                  0-23 #> Vendor ID:                            GenuineIntel #> Model name:                           Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz #> CPU family:                           6 #> Model:                                63 #> Thread(s) per core:                   1 #> Core(s) per socket:                   12 #> Socket(s):                            2 #> Stepping:                             2 #> CPU(s) scaling MHz:                   67% #> CPU max MHz:                          3300.0000 #> CPU min MHz:                          1200.0000 #> BogoMIPS:                             4988.71 #> Flags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm cpuid_fault epb invpcid_single pti ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts md_clear flush_l1d #> L1d cache:                            768 KiB (24 instances) #> L1i cache:                            768 KiB (24 instances) #> L2 cache:                             6 MiB (24 instances) #> L3 cache:                             60 MiB (2 instances) #> NUMA node(s):                         2 #> NUMA node0 CPU(s):                    0,2,4,6,8,10,12,14,16,18,20,22 #> NUMA node1 CPU(s):                    1,3,5,7,9,11,13,15,17,19,21,23 #> Vulnerability Gather data sampling:   Not affected #> Vulnerability Itlb multihit:          KVM: Mitigation: VMX unsupported #> Vulnerability L1tf:                   Mitigation; PTE Inversion #> Vulnerability Mds:                    Mitigation; Clear CPU buffers; SMT disabled #> Vulnerability Meltdown:               Mitigation; PTI #> Vulnerability Mmio stale data:        Mitigation; Clear CPU buffers; SMT disabled #> Vulnerability Reg file data sampling: Not affected #> Vulnerability Retbleed:               Not affected #> Vulnerability Spec rstack overflow:   Not affected #> Vulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl #> Vulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization #> Vulnerability Spectre v2:             Mitigation; Retpolines; IBPB conditional; IBRS_FW; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected #> Vulnerability Srbds:                  Not affected #> Vulnerability Tsx async abort:        Not affected"},{"path":"https://github.com/jeksterslab/bootStateSpace/articles/session.html","id":"memory","dir":"Articles","previous_headings":"","what":"Memory","title":"bootStateSpace: Session","text":"","code":"#>                total        used        free      shared  buff/cache   available #> Mem:           251Gi        11Gi        80Gi       5.6Gi       167Gi       240Gi #> Swap:             0B          0B          0B #> Total:         251Gi        11Gi        80Gi"},{"path":"https://github.com/jeksterslab/bootStateSpace/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ivan Jacob Agaloos Pesigan. Author, maintainer, copyright holder. Michael . Russell. Contributor. Sy-Miin Chow. Contributor.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pesigan, . J. ., Russell, M. ., & Chow, S.-M. (2025). Inferences effect sizes direct, indirect, total effects continuous-time mediation models. Psychological Methods. https://doi.org/10.1037/met0000779","code":"@Article{,   author = {Ivan Jacob Agaloos Pesigan and Michael A. Russell and Sy-Miin Chow},   title = {Inferences and effect sizes for direct, indirect, and total effects in continuous-time mediation models},   year = {2025},   doi = {10.1037/met0000779},   journal = {Psychological Methods},   note = {R package version 1.0.3.9000}, }"},{"path":"https://github.com/jeksterslab/bootStateSpace/index.html","id":"bootstatespace","dir":"","previous_headings":"","what":"Bootstrap for State Space Models","title":"Bootstrap for State Space Models","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Bootstrap for State Space Models","text":"Provides streamlined user-friendly framework bootstrapping state space models, particularly number subjects/units (n) exceeds one, scenario commonly encountered social behavioral sciences. parametric bootstrap implemented developed applied Pesigan, Russell, Chow (2025: https://doi.org/10.1037/met0000779).","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bootstrap for State Space Models","text":"can install CRAN release bootStateSpace : can install development version bootStateSpace GitHub :","code":"install.packages(\"bootStateSpace\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/bootStateSpace\")"},{"path":"https://github.com/jeksterslab/bootStateSpace/index.html","id":"more-information","dir":"","previous_headings":"","what":"More Information","title":"Bootstrap for State Space Models","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Bootstrap for State Space Models","text":"cite bootStateSpace publications, please cite Pesigan et al. (2025).","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"function simulates data state-space model fits model using dynr package. process repeated R times. assumes parameters remain constant across individuals time. moment, function supports type = 0.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"","code":"PBSSMFixed(   R,   path,   prefix,   n,   time,   delta_t = 1,   mu0,   sigma0_l,   alpha,   beta,   psi_l,   nu,   lambda,   theta_l,   type = 0,   x = NULL,   gamma = NULL,   kappa = NULL,   mu0_fixed = FALSE,   sigma0_fixed = FALSE,   alpha_level = 0.05,   optimization_flag = TRUE,   hessian_flag = FALSE,   verbose = FALSE,   weight_flag = FALSE,   debug_flag = FALSE,   perturb_flag = FALSE,   xtol_rel = 1e-07,   stopval = -9999,   ftol_rel = -1,   ftol_abs = -1,   maxeval = as.integer(-1),   maxtime = -1,   ncores = NULL,   seed = NULL,   clean = TRUE )"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"R Positive integer. Number bootstrap samples. path Path directory store bootstrap samples estimates. prefix Character string. Prefix used file names bootstrap samples estimates. n Positive integer. Number individuals. time Positive integer. Number time points. delta_t Numeric. Time interval. default value 1.0 option use numeric value discretized state space model parameterization linear stochastic differential equation model. mu0 Numeric vector. Mean initial latent variable values (\\(\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\\)). sigma0_l Numeric matrix. Cholesky factorization (t(chol(sigma0))) covariance matrix initial latent variable values (\\(\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\\)). alpha Numeric vector. Vector constant values dynamic model (\\(\\boldsymbol{\\alpha}\\)). beta Numeric matrix. Transition matrix relating values latent variables previous current time point (\\(\\boldsymbol{\\beta}\\)). psi_l Numeric matrix. Cholesky factorization (t(chol(psi))) covariance matrix process noise (\\(\\boldsymbol{\\Psi}\\)). nu Numeric vector. Vector intercept values measurement model (\\(\\boldsymbol{\\nu}\\)). lambda Numeric matrix. Factor loading matrix linking latent variables observed variables (\\(\\boldsymbol{\\Lambda}\\)). theta_l Numeric matrix. Cholesky factorization (t(chol(theta))) covariance matrix measurement error (\\(\\boldsymbol{\\Theta}\\)). type Integer. State space model type. See Details information. x List. element list matrix covariates individual n. number columns matrix equal time. gamma Numeric matrix. Matrix linking covariates latent variables current time point (\\(\\boldsymbol{\\Gamma}\\)). kappa Numeric matrix. Matrix linking covariates observed variables current time point (\\(\\boldsymbol{\\kappa}\\)). mu0_fixed Logical. mu0_fixed = TRUE, fix initial mean vector mu0. mu0_fixed = FALSE, mu0 estimated. sigma0_fixed Logical. sigma0_fixed = TRUE, fix initial covariance matrix tcrossprod(sigma0_l). sigma0_fixed = FALSE, sigma0 estimated. alpha_level Numeric vector. Significance level \\(\\alpha\\). optimization_flag flag (TRUE/FALSE) indicating whether optimization done. hessian_flag flag (TRUE/FALSE) indicating whether Hessian matrix calculated. verbose flag (TRUE/FALSE) indicating whether detailed intermediate output estimation process printed weight_flag flag (TRUE/FALSE) indicating whether negative log likelihood function weighted length time series individual debug_flag flag (TRUE/FALSE) indicating whether users want additional dynr output can used diagnostic purposes perturb_flag flag (TRUE/FLASE) indicating whether perturb latent states estimation. useful ensemble forecasting. xtol_rel Stopping criteria option parameter optimization. See dynr::dynr.model() details. stopval Stopping criteria option parameter optimization. See dynr::dynr.model() details. ftol_rel Stopping criteria option parameter optimization. See dynr::dynr.model() details. ftol_abs Stopping criteria option parameter optimization. See dynr::dynr.model() details. maxeval Stopping criteria option parameter optimization. See dynr::dynr.model() details. maxtime Stopping criteria option parameter optimization. See dynr::dynr.model() details. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number bootstrap samples R large value. seed Random seed. clean Logical. clean = TRUE, delete intermediate files generated function.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"Returns object class bootstatespace list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution \\(\\boldsymbol{\\hat{\\theta}}\\). vcov Sampling variance-covariance matrix \\(\\boldsymbol{\\hat{\\theta}}\\). est Vector estimated \\(\\boldsymbol{\\hat{\\theta}}\\). fun Function used (\"PBSSMFixed\"). method Bootstrap method used (\"parametric\").","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":"type-","dir":"Reference","previous_headings":"","what":"Type 0","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\mathbf{y}_{, t}\\), \\(\\boldsymbol{\\eta}_{, t}\\), \\(\\boldsymbol{\\varepsilon}_{, t}\\) random variables \\(\\boldsymbol{\\nu}\\), \\(\\boldsymbol{\\Lambda}\\), \\(\\boldsymbol{\\Theta}\\) model parameters. \\(\\mathbf{y}_{, t}\\) represents vector observed random variables, \\(\\boldsymbol{\\eta}_{, t}\\) vector latent random variables, \\(\\boldsymbol{\\varepsilon}_{, t}\\) vector random measurement errors, time \\(t\\) individual \\(\\). \\(\\boldsymbol{\\nu}\\) denotes vector intercepts, \\(\\boldsymbol{\\Lambda}\\) matrix factor loadings, \\(\\boldsymbol{\\Theta}\\) covariance matrix \\(\\boldsymbol{\\varepsilon}\\). alternative representation measurement error given $$     \\boldsymbol{\\varepsilon}_{, t}     =     \\boldsymbol{\\Theta}^{\\frac{1}{2}}     \\mathbf{z}_{, t},     \\quad     \\mathrm{}     \\quad     \\mathbf{z}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\mathbf{}     \\right)   $$ \\(\\mathbf{z}_{, t}\\) vector independent standard normal random variables \\(     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime}     =     \\boldsymbol{\\Theta} .   \\) dynamic structure given $$     \\boldsymbol{\\eta}_{, t}     =     \\boldsymbol{\\alpha}     +     \\boldsymbol{\\beta}     \\boldsymbol{\\eta}_{, t - 1}     +     \\boldsymbol{\\zeta}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\zeta}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Psi}     \\right)   $$ \\(\\boldsymbol{\\eta}_{, t}\\), \\(\\boldsymbol{\\eta}_{, t - 1}\\), \\(\\boldsymbol{\\zeta}_{, t}\\) random variables, \\(\\boldsymbol{\\alpha}\\), \\(\\boldsymbol{\\beta}\\), \\(\\boldsymbol{\\Psi}\\) model parameters. , \\(\\boldsymbol{\\eta}_{, t}\\) vector latent variables time \\(t\\) individual \\(\\), \\(\\boldsymbol{\\eta}_{, t - 1}\\) represents vector latent variables time \\(t - 1\\) individual \\(\\), \\(\\boldsymbol{\\zeta}_{, t}\\) represents vector dynamic noise time \\(t\\) individual \\(\\). \\(\\boldsymbol{\\alpha}\\) denotes vector intercepts, \\(\\boldsymbol{\\beta}\\) matrix autoregression cross regression coefficients, \\(\\boldsymbol{\\Psi}\\) covariance matrix \\(\\boldsymbol{\\zeta}_{, t}\\). alternative representation dynamic noise given $$     \\boldsymbol{\\zeta}_{, t}     =     \\boldsymbol{\\Psi}^{\\frac{1}{2}}     \\mathbf{z}_{, t},     \\quad     \\mathrm{}     \\quad     \\mathbf{z}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\mathbf{}     \\right)   $$ \\(     \\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right)     \\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right)^{\\prime}     =     \\boldsymbol{\\Psi} .   \\)","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":"type--1","dir":"Reference","previous_headings":"","what":"Type 1","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right) .   $$ dynamic structure given $$     \\boldsymbol{\\eta}_{, t}     =     \\boldsymbol{\\alpha}     +     \\boldsymbol{\\beta}     \\boldsymbol{\\eta}_{, t - 1}     +     \\boldsymbol{\\Gamma}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\zeta}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\zeta}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Psi}     \\right)   $$ \\(\\mathbf{x}_{, t}\\) represents vector covariates time \\(t\\) individual \\(\\), \\(\\boldsymbol{\\Gamma}\\) coefficient matrix linking covariates latent variables.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":"type--2","dir":"Reference","previous_headings":"","what":"Type 2","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\kappa}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\boldsymbol{\\kappa}\\) represents coefficient matrix linking covariates observed variables. dynamic structure given $$     \\boldsymbol{\\eta}_{, t}     =     \\boldsymbol{\\alpha}     +     \\boldsymbol{\\beta}     \\boldsymbol{\\eta}_{, t - 1}     +     \\boldsymbol{\\Gamma}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\zeta}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\zeta}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Psi}     \\right) .   $$","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"Chow, S.-M., Ho, M. R., Hamaker, E. L., & Dolan, C. V. (2010). Equivalence differences structural equation modeling state-space modeling techniques. Structural Equation Modeling: Multidisciplinary Journal, 17(2), 303–332. doi:10.1080/10705511003661553","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMFixed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric Bootstrap for the State Space Model (Fixed Parameters) — PBSSMFixed","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters set.seed(42) ## number of individuals n <- 5 ## time points time <- 50 delta_t <- 1 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) alpha <- rep(x = 0, times = p) beta <- 0.50 * diag(p) psi <- 0.001 * diag(p) psi_l <- t(chol(psi)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.001 * diag(k) theta_l <- t(chol(theta))  path <- tempdir()  pb <- PBSSMFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"ssm\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) print(pb) summary(pb) confint(pb) vcov(pb) coef(pb) print(pb, type = \"bc\") # bias-corrected summary(pb, type = \"bc\") confint(pb, type = \"bc\") } # }"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"function simulates data linear stochastic differential equation model using state-space model parameterization fits model using dynr package. process repeated R times. assumes parameters remain constant across individuals time. moment, function supports type = 0.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"","code":"PBSSMLinSDEFixed(   R,   path,   prefix,   n,   time,   delta_t = 0.1,   mu0,   sigma0_l,   iota,   phi,   sigma_l,   nu,   lambda,   theta_l,   type = 0,   x = NULL,   gamma = NULL,   kappa = NULL,   mu0_fixed = FALSE,   sigma0_fixed = FALSE,   alpha_level = 0.05,   optimization_flag = TRUE,   hessian_flag = FALSE,   verbose = FALSE,   weight_flag = FALSE,   debug_flag = FALSE,   perturb_flag = FALSE,   xtol_rel = 1e-07,   stopval = -9999,   ftol_rel = -1,   ftol_abs = -1,   maxeval = as.integer(-1),   maxtime = -1,   ncores = NULL,   seed = NULL,   clean = TRUE )"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"R Positive integer. Number bootstrap samples. path Path directory store bootstrap samples estimates. prefix Character string. Prefix used file names bootstrap samples estimates. n Positive integer. Number individuals. time Positive integer. Number time points. delta_t Numeric. Time interval (\\(\\Delta_t\\)). mu0 Numeric vector. Mean initial latent variable values (\\(\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\\)). sigma0_l Numeric matrix. Cholesky factorization (t(chol(sigma0))) covariance matrix initial latent variable values (\\(\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\\)). iota Numeric vector. unobserved term constant time (\\(\\boldsymbol{\\iota}\\)). phi Numeric matrix. drift matrix represents rate change solution absence random fluctuations (\\(\\boldsymbol{\\Phi}\\)). sigma_l Numeric matrix. Cholesky factorization (t(chol(sigma))) covariance matrix volatility randomness process (\\(\\boldsymbol{\\Sigma}\\)). nu Numeric vector. Vector intercept values measurement model (\\(\\boldsymbol{\\nu}\\)). lambda Numeric matrix. Factor loading matrix linking latent variables observed variables (\\(\\boldsymbol{\\Lambda}\\)). theta_l Numeric matrix. Cholesky factorization (t(chol(theta))) covariance matrix measurement error (\\(\\boldsymbol{\\Theta}\\)). type Integer. State space model type. See Details information. x List. element list matrix covariates individual n. number columns matrix equal time. gamma Numeric matrix. Matrix linking covariates latent variables current time point (\\(\\boldsymbol{\\Gamma}\\)). kappa Numeric matrix. Matrix linking covariates observed variables current time point (\\(\\boldsymbol{\\kappa}\\)). mu0_fixed Logical. mu0_fixed = TRUE, fix initial mean vector mu0. mu0_fixed = FALSE, mu0 estimated. sigma0_fixed Logical. sigma0_fixed = TRUE, fix initial covariance matrix tcrossprod(sigma0_l). sigma0_fixed = FALSE, sigma0 estimated. alpha_level Numeric vector. Significance level \\(\\alpha\\). optimization_flag flag (TRUE/FALSE) indicating whether optimization done. hessian_flag flag (TRUE/FALSE) indicating whether Hessian matrix calculated. verbose flag (TRUE/FALSE) indicating whether detailed intermediate output estimation process printed weight_flag flag (TRUE/FALSE) indicating whether negative log likelihood function weighted length time series individual debug_flag flag (TRUE/FALSE) indicating whether users want additional dynr output can used diagnostic purposes perturb_flag flag (TRUE/FLASE) indicating whether perturb latent states estimation. useful ensemble forecasting. xtol_rel Stopping criteria option parameter optimization. See dynr::dynr.model() details. stopval Stopping criteria option parameter optimization. See dynr::dynr.model() details. ftol_rel Stopping criteria option parameter optimization. See dynr::dynr.model() details. ftol_abs Stopping criteria option parameter optimization. See dynr::dynr.model() details. maxeval Stopping criteria option parameter optimization. See dynr::dynr.model() details. maxtime Stopping criteria option parameter optimization. See dynr::dynr.model() details. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number bootstrap samples R large value. seed Random seed. clean Logical. clean = TRUE, delete intermediate files generated function.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"Returns object class bootstatespace list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution \\(\\boldsymbol{\\hat{\\theta}}\\). vcov Sampling variance-covariance matrix \\(\\boldsymbol{\\hat{\\theta}}\\). est Vector estimated \\(\\boldsymbol{\\hat{\\theta}}\\). fun Function used (\"PBSSMLinSDEFixed\"). method Bootstrap method used (\"parametric\").","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"type-","dir":"Reference","previous_headings":"","what":"Type 0","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\mathbf{y}_{, t}\\), \\(\\boldsymbol{\\eta}_{, t}\\), \\(\\boldsymbol{\\varepsilon}_{, t}\\) random variables \\(\\boldsymbol{\\nu}\\), \\(\\boldsymbol{\\Lambda}\\), \\(\\boldsymbol{\\Theta}\\) model parameters. \\(\\mathbf{y}_{, t}\\) represents vector observed random variables, \\(\\boldsymbol{\\eta}_{, t}\\) vector latent random variables, \\(\\boldsymbol{\\varepsilon}_{, t}\\) vector random measurement errors, time \\(t\\) individual \\(\\). \\(\\boldsymbol{\\nu}\\) denotes vector intercepts, \\(\\boldsymbol{\\Lambda}\\) matrix factor loadings, \\(\\boldsymbol{\\Theta}\\) covariance matrix \\(\\boldsymbol{\\varepsilon}\\). alternative representation measurement error given $$     \\boldsymbol{\\varepsilon}_{, t}     =     \\boldsymbol{\\Theta}^{\\frac{1}{2}}     \\mathbf{z}_{, t},     \\quad     \\mathrm{}     \\quad     \\mathbf{z}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\mathbf{}     \\right)   $$ \\(\\mathbf{z}_{, t}\\) vector independent standard normal random variables \\(     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime}     =     \\boldsymbol{\\Theta} .   \\) dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\left(     \\boldsymbol{\\iota}     +     \\boldsymbol{\\Phi}     \\boldsymbol{\\eta}_{, t}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t}   $$ \\(\\boldsymbol{\\iota}\\) term unobserved constant time, \\(\\boldsymbol{\\Phi}\\) drift matrix represents rate change solution absence random fluctuations, \\(\\boldsymbol{\\Sigma}\\) matrix volatility randomness process, \\(\\mathrm{d}\\boldsymbol{W}\\) Wiener process Brownian motion, represents random fluctuations.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"type--1","dir":"Reference","previous_headings":"","what":"Type 1","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right) .   $$ dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\left(     \\boldsymbol{\\iota}     +     \\boldsymbol{\\Phi}     \\boldsymbol{\\eta}_{, t}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Gamma}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t}   $$ \\(\\mathbf{x}_{, t}\\) represents vector covariates time \\(t\\) individual \\(\\), \\(\\boldsymbol{\\Gamma}\\) coefficient matrix linking covariates latent variables.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"type--2","dir":"Reference","previous_headings":"","what":"Type 2","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\kappa}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\boldsymbol{\\kappa}\\) represents coefficient matrix linking covariates observed variables. dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\left(     \\boldsymbol{\\iota}     +     \\boldsymbol{\\Phi}     \\boldsymbol{\\eta}_{, t}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Gamma}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t} .   $$","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"state-space-parameterization","dir":"Reference","previous_headings":"","what":"State Space Parameterization","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"state space parameters function linear stochastic differential equation model parameters given $$       \\boldsymbol{\\beta}_{\\Delta t_{{l_{}}}}       =       \\exp{         \\left(           \\Delta t           \\boldsymbol{\\Phi}         \\right)       }   $$ $$       \\boldsymbol{\\alpha}_{\\Delta t_{{l_{}}}}       =       \\boldsymbol{\\Phi}^{-1}       \\left(         \\boldsymbol{\\beta} - \\mathbf{}_{p}       \\right)       \\boldsymbol{\\iota}   $$ $$       \\mathrm{vec}       \\left(         \\boldsymbol{\\Psi}_{\\Delta t_{{l_{}}}}       \\right)       =       \\left[         \\left(           \\boldsymbol{\\Phi} \\otimes \\mathbf{}_{p}         \\right)         +         \\left(           \\mathbf{}_{p} \\otimes \\boldsymbol{\\Phi}         \\right)       \\right]       \\left[         \\exp         \\left(           \\left[             \\left(               \\boldsymbol{\\Phi} \\otimes \\mathbf{}_{p}             \\right)             +             \\left(               \\mathbf{}_{p} \\otimes \\boldsymbol{\\Phi}             \\right)           \\right]           \\Delta t         \\right)         -         \\mathbf{}_{p \\times p}       \\right]       \\mathrm{vec}       \\left(         \\boldsymbol{\\Sigma}       \\right)   $$ \\(p\\) number latent variables \\(\\Delta t\\) time interval.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"Chow, S.-M., Ho, M. R., Hamaker, E. L., & Dolan, C. V. (2010). Equivalence differences structural equation modeling state-space modeling techniques. Structural Equation Modeling: Multidisciplinary Journal, 17(2), 303–332. doi:10.1080/10705511003661553","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMLinSDEFixed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric Bootstrap for the Linear Stochastic Differential Equation Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMLinSDEFixed","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters ## number of individuals n <- 5 ## time points time <- 50 delta_t <- 0.10 ## dynamic structure p <- 2 mu0 <- c(-3.0, 1.5) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) iota <- c(0.317, 0.230) phi <- matrix(   data = c(     -0.10,     0.05,     0.05,     -0.10   ),   nrow = p ) sigma <- matrix(   data = c(     2.79,     0.06,     0.06,     3.27   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 2 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.001 * diag(k) theta_l <- t(chol(theta))  path <- tempdir()  pb <- PBSSMLinSDEFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"lse\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   iota = iota,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) print(pb) summary(pb) confint(pb) vcov(pb) coef(pb) print(pb, type = \"bc\") # bias-corrected summary(pb, type = \"bc\") confint(pb, type = \"bc\") } # }"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"function simulates data Ornstein–Uhlenbeck (OU) model using state-space model parameterization fits model using dynr package. process repeated R times. assumes parameters remain constant across individuals time. moment, function supports type = 0.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"","code":"PBSSMOUFixed(   R,   path,   prefix,   n,   time,   delta_t = 0.1,   mu0,   sigma0_l,   mu,   phi,   sigma_l,   nu,   lambda,   theta_l,   type = 0,   x = NULL,   gamma = NULL,   kappa = NULL,   mu0_fixed = FALSE,   sigma0_fixed = FALSE,   alpha_level = 0.05,   optimization_flag = TRUE,   hessian_flag = FALSE,   verbose = FALSE,   weight_flag = FALSE,   debug_flag = FALSE,   perturb_flag = FALSE,   xtol_rel = 1e-07,   stopval = -9999,   ftol_rel = -1,   ftol_abs = -1,   maxeval = as.integer(-1),   maxtime = -1,   ncores = NULL,   seed = NULL,   clean = TRUE )"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"R Positive integer. Number bootstrap samples. path Path directory store bootstrap samples estimates. prefix Character string. Prefix used file names bootstrap samples estimates. n Positive integer. Number individuals. time Positive integer. Number time points. delta_t Numeric. Time interval (\\(\\Delta_t\\)). mu0 Numeric vector. Mean initial latent variable values (\\(\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\\)). sigma0_l Numeric matrix. Cholesky factorization (t(chol(sigma0))) covariance matrix initial latent variable values (\\(\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\\)). mu Numeric vector. long-term mean equilibrium level (\\(\\boldsymbol{\\mu}\\)). phi Numeric matrix. drift matrix represents rate change solution absence random fluctuations (\\(\\boldsymbol{\\Phi}\\)). also represents rate mean reversion, determining quickly variable returns mean. sigma_l Numeric matrix. Cholesky factorization (t(chol(sigma))) covariance matrix volatility randomness process (\\(\\boldsymbol{\\Sigma}\\)). nu Numeric vector. Vector intercept values measurement model (\\(\\boldsymbol{\\nu}\\)). lambda Numeric matrix. Factor loading matrix linking latent variables observed variables (\\(\\boldsymbol{\\Lambda}\\)). theta_l Numeric matrix. Cholesky factorization (t(chol(theta))) covariance matrix measurement error (\\(\\boldsymbol{\\Theta}\\)). type Integer. State space model type. See Details information. x List. element list matrix covariates individual n. number columns matrix equal time. gamma Numeric matrix. Matrix linking covariates latent variables current time point (\\(\\boldsymbol{\\Gamma}\\)). kappa Numeric matrix. Matrix linking covariates observed variables current time point (\\(\\boldsymbol{\\kappa}\\)). mu0_fixed Logical. mu0_fixed = TRUE, fix initial mean vector mu0. mu0_fixed = FALSE, mu0 estimated. sigma0_fixed Logical. sigma0_fixed = TRUE, fix initial covariance matrix tcrossprod(sigma0_l). sigma0_fixed = FALSE, sigma0 estimated. alpha_level Numeric vector. Significance level \\(\\alpha\\). optimization_flag flag (TRUE/FALSE) indicating whether optimization done. hessian_flag flag (TRUE/FALSE) indicating whether Hessian matrix calculated. verbose flag (TRUE/FALSE) indicating whether detailed intermediate output estimation process printed weight_flag flag (TRUE/FALSE) indicating whether negative log likelihood function weighted length time series individual debug_flag flag (TRUE/FALSE) indicating whether users want additional dynr output can used diagnostic purposes perturb_flag flag (TRUE/FLASE) indicating whether perturb latent states estimation. useful ensemble forecasting. xtol_rel Stopping criteria option parameter optimization. See dynr::dynr.model() details. stopval Stopping criteria option parameter optimization. See dynr::dynr.model() details. ftol_rel Stopping criteria option parameter optimization. See dynr::dynr.model() details. ftol_abs Stopping criteria option parameter optimization. See dynr::dynr.model() details. maxeval Stopping criteria option parameter optimization. See dynr::dynr.model() details. maxtime Stopping criteria option parameter optimization. See dynr::dynr.model() details. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number bootstrap samples R large value. seed Random seed. clean Logical. clean = TRUE, delete intermediate files generated function.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"Returns object class bootstatespace list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution \\(\\boldsymbol{\\hat{\\theta}}\\). vcov Sampling variance-covariance matrix \\(\\boldsymbol{\\hat{\\theta}}\\). est Vector estimated \\(\\boldsymbol{\\hat{\\theta}}\\). fun Function used (\"PBSSMOUFixed\"). method Bootstrap method used (\"parametric\").","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"type-","dir":"Reference","previous_headings":"","what":"Type 0","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\mathbf{y}_{, t}\\), \\(\\boldsymbol{\\eta}_{, t}\\), \\(\\boldsymbol{\\varepsilon}_{, t}\\) random variables \\(\\boldsymbol{\\nu}\\), \\(\\boldsymbol{\\Lambda}\\), \\(\\boldsymbol{\\Theta}\\) model parameters. \\(\\mathbf{y}_{, t}\\) represents vector observed random variables, \\(\\boldsymbol{\\eta}_{, t}\\) vector latent random variables, \\(\\boldsymbol{\\varepsilon}_{, t}\\) vector random measurement errors, time \\(t\\) individual \\(\\). \\(\\boldsymbol{\\nu}\\) denotes vector intercepts, \\(\\boldsymbol{\\Lambda}\\) matrix factor loadings, \\(\\boldsymbol{\\Theta}\\) covariance matrix \\(\\boldsymbol{\\varepsilon}\\). alternative representation measurement error given $$     \\boldsymbol{\\varepsilon}_{, t}     =     \\boldsymbol{\\Theta}^{\\frac{1}{2}}     \\mathbf{z}_{, t},     \\quad     \\mathrm{}     \\quad     \\mathbf{z}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\mathbf{}     \\right)   $$ \\(\\mathbf{z}_{, t}\\) vector independent standard normal random variables \\(     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime}     =     \\boldsymbol{\\Theta} .   \\) dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\boldsymbol{\\Phi}     \\left(     \\boldsymbol{\\eta}_{, t}     -     \\boldsymbol{\\mu}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t}   $$ \\(\\boldsymbol{\\mu}\\) long-term mean equilibrium level, \\(\\boldsymbol{\\Phi}\\) rate mean reversion, determining quickly variable returns mean, \\(\\boldsymbol{\\Sigma}\\) matrix volatility randomness process, \\(\\mathrm{d}\\boldsymbol{W}\\) Wiener process Brownian motion, represents random fluctuations.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"type--1","dir":"Reference","previous_headings":"","what":"Type 1","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right) .   $$ dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\boldsymbol{\\Phi}     \\left(     \\boldsymbol{\\eta}_{, t}     -     \\boldsymbol{\\mu}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Gamma}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t}   $$ \\(\\mathbf{x}_{, t}\\) represents vector covariates time \\(t\\) individual \\(\\), \\(\\boldsymbol{\\Gamma}\\) coefficient matrix linking covariates latent variables.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"type--2","dir":"Reference","previous_headings":"","what":"Type 2","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\kappa}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\boldsymbol{\\kappa}\\) represents coefficient matrix linking covariates observed variables. dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\boldsymbol{\\Phi}     \\left(     \\boldsymbol{\\eta}_{, t}     -     \\boldsymbol{\\mu}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Gamma}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t} .   $$","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"the-ou-model-as-a-linear-stochastic-differential-equation-model","dir":"Reference","previous_headings":"","what":"The OU model as a linear stochastic differential equation model","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"OU model first-order linear stochastic differential equation model form $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\left(     \\boldsymbol{\\iota}     +     \\boldsymbol{\\Phi}     \\boldsymbol{\\eta}_{, t}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t}   $$ \\(\\boldsymbol{\\mu} = - \\boldsymbol{\\Phi}^{-1} \\boldsymbol{\\iota}\\) , equivalently \\(\\boldsymbol{\\iota} = - \\boldsymbol{\\Phi} \\boldsymbol{\\mu}\\).","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"Chow, S.-M., Ho, M. R., Hamaker, E. L., & Dolan, C. V. (2010). Equivalence differences structural equation modeling state-space modeling techniques. Structural Equation Modeling: Multidisciplinary Journal, 17(2), 303–332. doi:10.1080/10705511003661553","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMOUFixed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric Bootstrap for the Ornstein–Uhlenbeck Model using a State Space Model Parameterization (Fixed Parameters) — PBSSMOUFixed","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters ## number of individuals n <- 5 ## time points time <- 50 delta_t <- 0.10 ## dynamic structure p <- 2 mu0 <- c(-3.0, 1.5) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) mu <- c(5.76, 5.18) phi <- matrix(   data = c(     -0.10,     0.05,     0.05,     -0.10   ),   nrow = p ) sigma <- matrix(   data = c(     2.79,     0.06,     0.06,     3.27   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 2 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.001 * diag(k) theta_l <- t(chol(theta))  path <- tempdir()  pb <- PBSSMOUFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) print(pb) summary(pb) confint(pb) vcov(pb) coef(pb) print(pb, type = \"bc\") # bias-corrected summary(pb, type = \"bc\") confint(pb, type = \"bc\") } # }"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMVARFixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","title":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","text":"function simulates data vector autoregressive model using state-space model parameterization fits model using dynr package. process repeated R times. assumes parameters remain constant across individuals time. moment, function supports type = 0.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMVARFixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","text":"","code":"PBSSMVARFixed(   R,   path,   prefix,   n,   time,   mu0,   sigma0_l,   alpha,   beta,   psi_l,   type = 0,   x = NULL,   gamma = NULL,   mu0_fixed = FALSE,   sigma0_fixed = FALSE,   alpha_level = 0.05,   optimization_flag = TRUE,   hessian_flag = FALSE,   verbose = FALSE,   weight_flag = FALSE,   debug_flag = FALSE,   perturb_flag = FALSE,   xtol_rel = 1e-07,   stopval = -9999,   ftol_rel = -1,   ftol_abs = -1,   maxeval = as.integer(-1),   maxtime = -1,   ncores = NULL,   seed = NULL,   clean = TRUE )"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMVARFixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","text":"R Positive integer. Number bootstrap samples. path Path directory store bootstrap samples estimates. prefix Character string. Prefix used file names bootstrap samples estimates. n Positive integer. Number individuals. time Positive integer. Number time points. mu0 Numeric vector. Mean initial latent variable values (\\(\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\\)). sigma0_l Numeric matrix. Cholesky factorization (t(chol(sigma0))) covariance matrix initial latent variable values (\\(\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\\)). alpha Numeric vector. Vector constant values dynamic model (\\(\\boldsymbol{\\alpha}\\)). beta Numeric matrix. Transition matrix relating values latent variables previous current time point (\\(\\boldsymbol{\\beta}\\)). psi_l Numeric matrix. Cholesky factorization (t(chol(psi))) covariance matrix process noise (\\(\\boldsymbol{\\Psi}\\)). type Integer. State space model type. See Details information. x List. element list matrix covariates individual n. number columns matrix equal time. gamma Numeric matrix. Matrix linking covariates latent variables current time point (\\(\\boldsymbol{\\Gamma}\\)). mu0_fixed Logical. mu0_fixed = TRUE, fix initial mean vector mu0. mu0_fixed = FALSE, mu0 estimated. sigma0_fixed Logical. sigma0_fixed = TRUE, fix initial covariance matrix tcrossprod(sigma0_l). sigma0_fixed = FALSE, sigma0 estimated. alpha_level Numeric vector. Significance level \\(\\alpha\\). optimization_flag flag (TRUE/FALSE) indicating whether optimization done. hessian_flag flag (TRUE/FALSE) indicating whether Hessian matrix calculated. verbose flag (TRUE/FALSE) indicating whether detailed intermediate output estimation process printed weight_flag flag (TRUE/FALSE) indicating whether negative log likelihood function weighted length time series individual debug_flag flag (TRUE/FALSE) indicating whether users want additional dynr output can used diagnostic purposes perturb_flag flag (TRUE/FLASE) indicating whether perturb latent states estimation. useful ensemble forecasting. xtol_rel Stopping criteria option parameter optimization. See dynr::dynr.model() details. stopval Stopping criteria option parameter optimization. See dynr::dynr.model() details. ftol_rel Stopping criteria option parameter optimization. See dynr::dynr.model() details. ftol_abs Stopping criteria option parameter optimization. See dynr::dynr.model() details. maxeval Stopping criteria option parameter optimization. See dynr::dynr.model() details. maxtime Stopping criteria option parameter optimization. See dynr::dynr.model() details. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number bootstrap samples R large value. seed Random seed. clean Logical. clean = TRUE, delete intermediate files generated function.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMVARFixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","text":"Returns object class bootstatespace list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution \\(\\boldsymbol{\\hat{\\theta}}\\). vcov Sampling variance-covariance matrix \\(\\boldsymbol{\\hat{\\theta}}\\). est Vector estimated \\(\\boldsymbol{\\hat{\\theta}}\\). fun Function used (\"PBSSMVARFixed\"). method Bootstrap method used (\"parametric\").","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMVARFixed.html","id":"type-","dir":"Reference","previous_headings":"","what":"Type 0","title":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\eta}_{, t}   $$ \\(\\mathbf{y}_{, t}\\) represents vector observed variables \\(\\boldsymbol{\\eta}_{, t}\\) vector latent variables individual \\(\\) time \\(t\\). Since observed latent variables equal, generate data dynamic structure. dynamic structure given $$     \\boldsymbol{\\eta}_{, t}     =     \\boldsymbol{\\alpha}     +     \\boldsymbol{\\beta}     \\boldsymbol{\\eta}_{, t - 1}     +     \\boldsymbol{\\zeta}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\zeta}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Psi}     \\right)   $$ \\(\\boldsymbol{\\eta}_{, t}\\), \\(\\boldsymbol{\\eta}_{, t - 1}\\), \\(\\boldsymbol{\\zeta}_{, t}\\) random variables, \\(\\boldsymbol{\\alpha}\\), \\(\\boldsymbol{\\beta}\\), \\(\\boldsymbol{\\Psi}\\) model parameters. , \\(\\boldsymbol{\\eta}_{, t}\\) vector latent variables time \\(t\\) individual \\(\\), \\(\\boldsymbol{\\eta}_{, t - 1}\\) represents vector latent variables time \\(t - 1\\) individual \\(\\), \\(\\boldsymbol{\\zeta}_{, t}\\) represents vector dynamic noise time \\(t\\) individual \\(\\). \\(\\boldsymbol{\\alpha}\\) denotes vector intercepts, \\(\\boldsymbol{\\beta}\\) matrix autoregression cross regression coefficients, \\(\\boldsymbol{\\Psi}\\) covariance matrix \\(\\boldsymbol{\\zeta}_{, t}\\). alternative representation dynamic noise given $$     \\boldsymbol{\\zeta}_{, t}     =     \\boldsymbol{\\Psi}^{\\frac{1}{2}}     \\mathbf{z}_{, t},     \\quad     \\mathrm{}     \\quad     \\mathbf{z}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\mathbf{}     \\right)   $$ \\(     \\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right)     \\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right)^{\\prime}     =     \\boldsymbol{\\Psi} .   \\)","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMVARFixed.html","id":"type--1","dir":"Reference","previous_headings":"","what":"Type 1","title":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\eta}_{, t} .   $$ dynamic structure given $$     \\boldsymbol{\\eta}_{, t}     =     \\boldsymbol{\\alpha}     +     \\boldsymbol{\\beta}     \\boldsymbol{\\eta}_{, t - 1}     +     \\boldsymbol{\\Gamma}     \\mathbf{x}_{, t}     +     \\boldsymbol{\\zeta}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\zeta}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Psi}     \\right)   $$ \\(\\mathbf{x}_{, t}\\) represents vector covariates time \\(t\\) individual \\(\\), \\(\\boldsymbol{\\Gamma}\\) coefficient matrix linking covariates latent variables.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMVARFixed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","text":"Chow, S.-M., Ho, M. R., Hamaker, E. L., & Dolan, C. V. (2010). Equivalence differences structural equation modeling state-space modeling techniques. Structural Equation Modeling: Multidisciplinary Journal, 17(2), 303–332. doi:10.1080/10705511003661553","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMVARFixed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/PBSSMVARFixed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric Bootstrap for the Vector Autoregressive Model (Fixed Parameters) — PBSSMVARFixed","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters ## number of individuals n <- 5 ## time points time <- 50 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) alpha <- rep(x = 0, times = p) beta <- 0.50 * diag(p) psi <- 0.001 * diag(p) psi_l <- t(chol(psi))  path <- tempdir()  pb <- PBSSMVARFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"var\",   n = n,   time = time,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) print(pb) summary(pb) confint(pb) vcov(pb) coef(pb) print(pb, type = \"bc\") # bias-corrected summary(pb, type = \"bc\") confint(pb, type = \"bc\") } # }"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/bootStateSpace-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bootStateSpace: Bootstrap for State Space Models — bootStateSpace-package","title":"bootStateSpace: Bootstrap for State Space Models — bootStateSpace-package","text":"Provides streamlined user-friendly framework bootstrapping state space models, particularly number subjects/units (n) exceeds one, scenario commonly encountered social behavioral sciences. parametric bootstrap implemented developed applied Pesigan, Russell, Chow (2025) doi:10.1037/met0000779 .","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/bootStateSpace-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bootStateSpace: Bootstrap for State Space Models — bootStateSpace-package","text":"Maintainer: Ivan Jacob Agaloos Pesigan r.jeksterslab@gmail.com (ORCID) [copyright holder] contributors: Michael . Russell mar60@psu.edu (ORCID) [contributor] Sy-Miin Chow quc16@psu.edu (ORCID) [contributor]","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/coef.bootstatespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated Parameter Method for an Object of Class bootstatespace — coef.bootstatespace","title":"Estimated Parameter Method for an Object of Class bootstatespace — coef.bootstatespace","text":"Estimated Parameter Method Object Class bootstatespace","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/coef.bootstatespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated Parameter Method for an Object of Class bootstatespace — coef.bootstatespace","text":"","code":"# S3 method for class 'bootstatespace' coef(object, ...)"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/coef.bootstatespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated Parameter Method for an Object of Class bootstatespace — coef.bootstatespace","text":"object Object Class bootstatespace. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/coef.bootstatespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimated Parameter Method for an Object of Class bootstatespace — coef.bootstatespace","text":"Returns vector estimated parameters.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/coef.bootstatespace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimated Parameter Method for an Object of Class bootstatespace — coef.bootstatespace","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/coef.bootstatespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimated Parameter Method for an Object of Class bootstatespace — coef.bootstatespace","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters ## number of individuals n <- 5 ## time points time <- 50 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) alpha <- rep(x = 0, times = p) beta <- 0.50 * diag(p) psi <- 0.001 * diag(p) psi_l <- t(chol(psi))  path <- tempdir()  pb <- PBSSMVARFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"var\",   n = n,   time = time,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) coef(pb) } # }"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/confint.bootstatespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals Method for an Object of Class bootstatespace — confint.bootstatespace","title":"Confidence Intervals Method for an Object of Class bootstatespace — confint.bootstatespace","text":"Confidence Intervals Method Object Class bootstatespace","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/confint.bootstatespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals Method for an Object of Class bootstatespace — confint.bootstatespace","text":"","code":"# S3 method for class 'bootstatespace' confint(object, parm = NULL, level = 0.95, type = \"pc\", ...)"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/confint.bootstatespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals Method for an Object of Class bootstatespace — confint.bootstatespace","text":"object Object Class bootstatespace. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. type Charater string. Confidence interval type, , type = \"pc\" percentile; type = \"bc\" bias corrected. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/confint.bootstatespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals Method for an Object of Class bootstatespace — confint.bootstatespace","text":"Returns matrix confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/confint.bootstatespace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals Method for an Object of Class bootstatespace — confint.bootstatespace","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/confint.bootstatespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals Method for an Object of Class bootstatespace — confint.bootstatespace","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters ## number of individuals n <- 5 ## time points time <- 50 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) alpha <- rep(x = 0, times = p) beta <- 0.50 * diag(p) psi <- 0.001 * diag(p) psi_l <- t(chol(psi))  path <- tempdir()  pb <- PBSSMVARFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"var\",   n = n,   time = time,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) confint(pb) confint(pb, type = \"bc\") } # }"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.bootstatespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Method for an Object of Class bootstatespace — extract.bootstatespace","title":"Extract Method for an Object of Class bootstatespace — extract.bootstatespace","text":"Extract Method Object Class bootstatespace","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.bootstatespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Method for an Object of Class bootstatespace — extract.bootstatespace","text":"","code":"# S3 method for class 'bootstatespace' extract(object, what = NULL)"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.bootstatespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Method for an Object of Class bootstatespace — extract.bootstatespace","text":"object Object Class bootstatespace. Character string. specific matrix extract. = NULL, extract available matrices.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.bootstatespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Method for an Object of Class bootstatespace — extract.bootstatespace","text":"Returns list. element list list bootstrap estimates matrix format.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.bootstatespace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Method for an Object of Class bootstatespace — extract.bootstatespace","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.bootstatespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Method for an Object of Class bootstatespace — extract.bootstatespace","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters ## number of individuals n <- 5 ## time points time <- 50 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) alpha <- rep(x = 0, times = p) beta <- 0.50 * diag(p) psi <- 0.001 * diag(p) psi_l <- t(chol(psi))  path <- tempdir()  pb <- PBSSMVARFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"var\",   n = n,   time = time,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) extract(pb, what = \"beta\") } # }"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Generic Function — extract","title":"Extract Generic Function — extract","text":"generic function extracting elements objects.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Generic Function — extract","text":"","code":"extract(object, what)"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Generic Function — extract","text":"object object. Character string.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Generic Function — extract","text":"value determined specific method object's class.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/print.bootstatespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for an Object of Class bootstatespace — print.bootstatespace","title":"Print Method for an Object of Class bootstatespace — print.bootstatespace","text":"Print Method Object Class bootstatespace","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/print.bootstatespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for an Object of Class bootstatespace — print.bootstatespace","text":"","code":"# S3 method for class 'bootstatespace' print(x, alpha = NULL, type = \"pc\", digits = 4, ...)"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/print.bootstatespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for an Object of Class bootstatespace — print.bootstatespace","text":"x Object Class bootstatespace. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use argument alpha used x. type Charater string. Confidence interval type, , type = \"pc\" percentile; type = \"bc\" bias corrected. digits Digits print. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/print.bootstatespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for an Object of Class bootstatespace — print.bootstatespace","text":"Prints matrix estimates, standard errors, number bootstrap replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/print.bootstatespace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for an Object of Class bootstatespace — print.bootstatespace","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/print.bootstatespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for an Object of Class bootstatespace — print.bootstatespace","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters ## number of individuals n <- 5 ## time points time <- 50 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) alpha <- rep(x = 0, times = p) beta <- 0.50 * diag(p) psi <- 0.001 * diag(p) psi_l <- t(chol(psi))  path <- tempdir()  pb <- PBSSMVARFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"var\",   n = n,   time = time,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) print(pb) print(pb, type = \"bc\") } # }"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/summary.bootstatespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class bootstatespace — summary.bootstatespace","title":"Summary Method for an Object of Class bootstatespace — summary.bootstatespace","text":"Summary Method Object Class bootstatespace","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/summary.bootstatespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class bootstatespace — summary.bootstatespace","text":"","code":"# S3 method for class 'bootstatespace' summary(object, alpha = NULL, type = \"pc\", digits = 4, ...)"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/summary.bootstatespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class bootstatespace — summary.bootstatespace","text":"object Object Class bootstatespace. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use argument alpha used object. type Charater string. Confidence interval type, , type = \"pc\" percentile; type = \"bc\" bias corrected. digits Digits print. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/summary.bootstatespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class bootstatespace — summary.bootstatespace","text":"Returns matrix estimates, standard errors, number bootstrap replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/summary.bootstatespace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class bootstatespace — summary.bootstatespace","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/summary.bootstatespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class bootstatespace — summary.bootstatespace","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters ## number of individuals n <- 5 ## time points time <- 50 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) alpha <- rep(x = 0, times = p) beta <- 0.50 * diag(p) psi <- 0.001 * diag(p) psi_l <- t(chol(psi))  path <- tempdir()  pb <- PBSSMVARFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"var\",   n = n,   time = time,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) summary(pb) summary(pb, type = \"bc\") } # }"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/vcov.bootstatespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Variance-Covariance Matrix Method for an Object of Class bootstatespace — vcov.bootstatespace","title":"Sampling Variance-Covariance Matrix Method for an Object of Class bootstatespace — vcov.bootstatespace","text":"Sampling Variance-Covariance Matrix Method Object Class bootstatespace","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/vcov.bootstatespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling Variance-Covariance Matrix Method for an Object of Class bootstatespace — vcov.bootstatespace","text":"","code":"# S3 method for class 'bootstatespace' vcov(object, ...)"},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/vcov.bootstatespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling Variance-Covariance Matrix Method for an Object of Class bootstatespace — vcov.bootstatespace","text":"object Object Class bootstatespace. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/vcov.bootstatespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling Variance-Covariance Matrix Method for an Object of Class bootstatespace — vcov.bootstatespace","text":"Returns variance-covariance matrix estimates.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/vcov.bootstatespace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sampling Variance-Covariance Matrix Method for an Object of Class bootstatespace — vcov.bootstatespace","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/reference/vcov.bootstatespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling Variance-Covariance Matrix Method for an Object of Class bootstatespace — vcov.bootstatespace","text":"","code":"if (FALSE) { # \\dontrun{ # prepare parameters ## number of individuals n <- 5 ## time points time <- 50 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- 0.001 * diag(p) sigma0_l <- t(chol(sigma0)) alpha <- rep(x = 0, times = p) beta <- 0.50 * diag(p) psi <- 0.001 * diag(p) psi_l <- t(chol(psi))  path <- tempdir()  pb <- PBSSMVARFixed(   R = 10L, # use at least 1000 in actual research   path = path,   prefix = \"var\",   n = n,   time = time,   mu0 = mu0,   sigma0_l = sigma0_l,   alpha = alpha,   beta = beta,   psi_l = psi_l,   type = 0,   ncores = 1, # consider using multiple cores   seed = 42 ) vcov(pb) } # }"},{"path":[]},{"path":"https://github.com/jeksterslab/bootStateSpace/news/index.html","id":"patch-1-0-3-9000","dir":"Changelog","previous_headings":"","what":"Patch","title":"bootStateSpace 1.0.3.9000","text":"Minor edits methods.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/news/index.html","id":"bootstatespace-103","dir":"Changelog","previous_headings":"","what":"bootStateSpace 1.0.3","title":"bootStateSpace 1.0.3","text":"CRAN release: 2025-10-09","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/news/index.html","id":"patch-1-0-3","dir":"Changelog","previous_headings":"","what":"Patch","title":"bootStateSpace 1.0.3","text":"Added citation Pesigan, . J. ., Russell, M. ., & Chow, S.-M. (2025). Inferences effect sizes direct, indirect, total effects continuous-time mediation models. Psychological Methods. https://doi.org/10.1037/met0000779.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/news/index.html","id":"bootstatespace-102","dir":"Changelog","previous_headings":"","what":"bootStateSpace 1.0.2","title":"bootStateSpace 1.0.2","text":"CRAN release: 2025-02-14","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/news/index.html","id":"patch-1-0-2","dir":"Changelog","previous_headings":"","what":"Patch","title":"bootStateSpace 1.0.2","text":"Added clean argument PBSSMFixed, PBSSMOUFixed, PBSSMLinSDEFixed, PBSSMVARFixed functions.","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/news/index.html","id":"bootstatespace-101","dir":"Changelog","previous_headings":"","what":"bootStateSpace 1.0.1","title":"bootStateSpace 1.0.1","text":"CRAN release: 2025-01-22","code":""},{"path":"https://github.com/jeksterslab/bootStateSpace/news/index.html","id":"patch-1-0-1","dir":"Changelog","previous_headings":"","what":"Patch","title":"bootStateSpace 1.0.1","text":"Initial CRAN release","code":""}]
